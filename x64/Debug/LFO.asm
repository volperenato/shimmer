; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_R4LFO@@6B@					; LFO::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVLFO@@@8					; LFO `RTTI Type Descriptor'
PUBLIC	??_R2LFO@@8					; LFO::`RTTI Base Class Array'
PUBLIC	??_R3LFO@@8					; LFO::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7LFO@@6B@					; LFO::`vftable'
PUBLIC	??_R1A@?0A@EA@LFO@@8				; LFO::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_sin:PROC
;	COMDAT ??_R1A@?0A@EA@LFO@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@LFO@@8 DD imagerel ??_R0?AVLFO@@@8	; LFO::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3LFO@@8
rdata$r	ENDS
;	COMDAT ??_7LFO@@6B@
CONST	SEGMENT
??_7LFO@@6B@ DQ	FLAT:??_R4LFO@@6B@			; LFO::`vftable'
	DQ	FLAT:?init@LFO@@UEAAXW4OscillatorType@@MH@Z
	DQ	FLAT:?setSampleRate@LFO@@UEAAXH@Z
	DQ	FLAT:?processAudio@LFO@@UEAAMXZ
CONST	ENDS
;	COMDAT ??_R3LFO@@8
rdata$r	SEGMENT
??_R3LFO@@8 DD	00H					; LFO::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2LFO@@8
rdata$r	ENDS
;	COMDAT ??_R2LFO@@8
rdata$r	SEGMENT
??_R2LFO@@8 DD	imagerel ??_R1A@?0A@EA@LFO@@8		; LFO::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R0?AVLFO@@@8
data$rs	SEGMENT
??_R0?AVLFO@@@8 DQ FLAT:??_7type_info@@6B@		; LFO `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVLFO@@', 00H
data$rs	ENDS
;	COMDAT ??_R4LFO@@6B@
rdata$r	SEGMENT
??_R4LFO@@6B@ DD 01H					; LFO::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVLFO@@@8
	DD	imagerel ??_R3LFO@@8
	DD	imagerel ??_R4LFO@@6B@
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
PUBLIC	?processAudio@LFO@@UEAAMXZ			; LFO::processAudio
PUBLIC	?setSampleRate@LFO@@UEAAXH@Z			; LFO::setSampleRate
PUBLIC	?increaseLFOCounter@LFO@@AEAAXXZ		; LFO::increaseLFOCounter
PUBLIC	?computeIncrement@LFO@@AEAAXXZ			; LFO::computeIncrement
PUBLIC	?setLFOunipolar@LFO@@QEAAX_N@Z			; LFO::setLFOunipolar
PUBLIC	?init@LFO@@UEAAXW4OscillatorType@@MH@Z		; LFO::init
PUBLIC	??1LFO@@QEAA@XZ					; LFO::~LFO
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1LFO@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+101
	DD	imagerel $unwind$??1LFO@@QEAA@XZ
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1LFO@@QEAA@XZ DD 040a01H
	DD	06340aH
	DD	07006320aH
?MAX_LPF_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMAX_LPF_FREQUENCY_LOG@@YAXXZ ; MAX_LPF_FREQUENCY_LOG$initializer$
?MIN_LPF_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMIN_LPF_FREQUENCY_LOG@@YAXXZ ; MIN_LPF_FREQUENCY_LOG$initializer$
?MAX_HPF_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMAX_HPF_FREQUENCY_LOG@@YAXXZ ; MAX_HPF_FREQUENCY_LOG$initializer$
?MIN_HPF_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMIN_HPF_FREQUENCY_LOG@@YAXXZ ; MIN_HPF_FREQUENCY_LOG$initializer$
?MAX_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMAX_FREQUENCY_LOG@@YAXXZ ; MAX_FREQUENCY_LOG$initializer$
?MIN_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMIN_FREQUENCY_LOG@@YAXXZ ; MIN_FREQUENCY_LOG$initializer$
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
;	COMDAT ??__EMAX_LPF_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMAX_LPF_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MAX_LPF_FREQUENCY_LOG'', COMDAT

; 12   : const float MAX_LPF_FREQUENCY_LOG = log(MAX_LPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@40d28e0000000000
	rex_jmp	QWORD PTR __imp_log
??__EMAX_LPF_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MAX_LPF_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
;	COMDAT ??__EMIN_LPF_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMIN_LPF_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MIN_LPF_FREQUENCY_LOG'', COMDAT

; 13   : const float MIN_LPF_FREQUENCY_LOG = log(MIN_LPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@4034000000000000
	rex_jmp	QWORD PTR __imp_log
??__EMIN_LPF_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MIN_LPF_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
;	COMDAT ??__EMAX_HPF_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMAX_HPF_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MAX_HPF_FREQUENCY_LOG'', COMDAT

; 14   : const float MAX_HPF_FREQUENCY_LOG = log(MAX_HPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@40d09a0000000000
	rex_jmp	QWORD PTR __imp_log
??__EMAX_HPF_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MAX_HPF_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
;	COMDAT ??__EMIN_HPF_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMIN_HPF_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MIN_HPF_FREQUENCY_LOG'', COMDAT

; 15   : const float MIN_HPF_FREQUENCY_LOG = log(MIN_HPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@4024000000000000
	rex_jmp	QWORD PTR __imp_log
??__EMIN_HPF_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MIN_HPF_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
;	COMDAT ??__EMAX_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMAX_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MAX_FREQUENCY_LOG'', COMDAT

; 16   : const float MAX_FREQUENCY_LOG = log(MAX_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@40d3880000000000
	rex_jmp	QWORD PTR __imp_log
??__EMAX_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MAX_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
;	COMDAT ??__EMIN_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMIN_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MIN_FREQUENCY_LOG'', COMDAT

; 17   : const float MIN_FREQUENCY_LOG = log(MIN_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@4034000000000000
	rex_jmp	QWORD PTR __imp_log
??__EMIN_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MIN_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LFO.cpp
;	COMDAT ??1LFO@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1LFO@@QEAA@XZ PROC					; LFO::~LFO, COMDAT

; 29   : {

$LN5:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7LFO@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax

; 30   : 	delete(lfo_sine);

	mov	edi, 4
	mov	rcx, QWORD PTR [rcx+40]
	mov	edx, edi
	call	??3@YAXPEAX_K@Z				; operator delete

; 31   : 	delete(lfo_saw);

	mov	rcx, QWORD PTR [rbx+32]
	mov	edx, edi
	call	??3@YAXPEAX_K@Z				; operator delete

; 32   : 	delete(lfo_triangular);

	mov	rcx, QWORD PTR [rbx+48]
	mov	edx, edi
	call	??3@YAXPEAX_K@Z				; operator delete

; 33   : 	delete(lfo_pulse);

	mov	rcx, QWORD PTR [rbx+56]
	mov	edx, edi
	call	??3@YAXPEAX_K@Z				; operator delete

; 34   : 	lfo_sine = lfo_saw = lfo_triangular = lfo_pulse = nullptr;

	xor	eax, eax
	mov	QWORD PTR [rbx+56], rax
	mov	QWORD PTR [rbx+48], rax
	mov	QWORD PTR [rbx+32], rax
	mov	QWORD PTR [rbx+40], rax

; 35   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1LFO@@QEAA@XZ ENDP					; LFO::~LFO
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LFO.cpp
;	COMDAT ?init@LFO@@UEAAXW4OscillatorType@@MH@Z
_TEXT	SEGMENT
this$ = 8
waveform$ = 16
frequency$ = 24
sampleRate$ = 32
?init@LFO@@UEAAXW4OscillatorType@@MH@Z PROC		; LFO::init, COMDAT

; 39   : 	lfo_counter = 0;

	and	DWORD PTR [rcx+24], 0

; 42   : 	lfo_frequency = frequency;

	movss	DWORD PTR [rcx+8], xmm2

; 75   : 	lfo_inc = WAVETABLE_SIZE * lfo_frequency / (float) lfo_sampleRate;

	mulss	xmm2, DWORD PTR __real@45000000

; 40   : 	lfo_amplitude = 1.0;

	mov	DWORD PTR [rcx+16], 1065353216		; 3f800000H
	movd	xmm0, r9d

; 75   : 	lfo_inc = WAVETABLE_SIZE * lfo_frequency / (float) lfo_sampleRate;

	cvtdq2ps xmm0, xmm0

; 41   : 	lfo_waveform = waveform;

	mov	DWORD PTR [rcx+20], edx

; 43   : 	lfo_sampleRate = sampleRate;

	mov	DWORD PTR [rcx+12], r9d

; 75   : 	lfo_inc = WAVETABLE_SIZE * lfo_frequency / (float) lfo_sampleRate;

	divss	xmm2, xmm0
	movss	DWORD PTR [rcx+28], xmm2

; 44   : 	computeIncrement();	
; 45   : }

	ret	0
?init@LFO@@UEAAXW4OscillatorType@@MH@Z ENDP		; LFO::init
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LFO.cpp
;	COMDAT ?setLFOunipolar@LFO@@QEAAX_N@Z
_TEXT	SEGMENT
this$ = 8
isUnipolar$ = 16
?setLFOunipolar@LFO@@QEAAX_N@Z PROC			; LFO::setLFOunipolar, COMDAT

; 65   : 	lfo_unipolar = isUnipolar;

	mov	BYTE PTR [rcx+64], dl

; 66   : }

	ret	0
?setLFOunipolar@LFO@@QEAAX_N@Z ENDP			; LFO::setLFOunipolar
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LFO.cpp
;	COMDAT ?computeIncrement@LFO@@AEAAXXZ
_TEXT	SEGMENT
this$ = 8
?computeIncrement@LFO@@AEAAXXZ PROC			; LFO::computeIncrement, COMDAT

; 74   : {

	movd	xmm0, DWORD PTR [rcx+12]

; 75   : 	lfo_inc = WAVETABLE_SIZE * lfo_frequency / (float) lfo_sampleRate;

	movss	xmm1, DWORD PTR [rcx+8]
	mulss	xmm1, DWORD PTR __real@45000000
	cvtdq2ps xmm0, xmm0
	divss	xmm1, xmm0
	movss	DWORD PTR [rcx+28], xmm1

; 76   : }

	ret	0
?computeIncrement@LFO@@AEAAXXZ ENDP			; LFO::computeIncrement
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LFO.cpp
;	COMDAT ?increaseLFOCounter@LFO@@AEAAXXZ
_TEXT	SEGMENT
this$ = 8
?increaseLFOCounter@LFO@@AEAAXXZ PROC			; LFO::increaseLFOCounter, COMDAT

; 80   : 	lfo_counter += lfo_inc;

	movss	xmm0, DWORD PTR [rcx+28]
	addss	xmm0, DWORD PTR [rcx+24]

; 81   : 	if (lfo_counter >= WAVETABLE_SIZE)

	movss	xmm1, DWORD PTR __real@45000000
	comiss	xmm0, xmm1
	movss	DWORD PTR [rcx+24], xmm0
	jb	SHORT $LN2@increaseLF

; 82   : 		lfo_counter -= WAVETABLE_SIZE;

	subss	xmm0, xmm1
	movss	DWORD PTR [rcx+24], xmm0
$LN2@increaseLF:

; 83   : }

	ret	0
?increaseLFOCounter@LFO@@AEAAXXZ ENDP			; LFO::increaseLFOCounter
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LFO.cpp
;	COMDAT ?setSampleRate@LFO@@UEAAXH@Z
_TEXT	SEGMENT
this$ = 8
sampleRate$ = 16
?setSampleRate@LFO@@UEAAXH@Z PROC			; LFO::setSampleRate, COMDAT

; 75   : 	lfo_inc = WAVETABLE_SIZE * lfo_frequency / (float) lfo_sampleRate;

	movss	xmm1, DWORD PTR [rcx+8]
	mulss	xmm1, DWORD PTR __real@45000000

; 87   : 	lfo_sampleRate = sampleRate;

	mov	DWORD PTR [rcx+12], edx
	movd	xmm0, edx

; 75   : 	lfo_inc = WAVETABLE_SIZE * lfo_frequency / (float) lfo_sampleRate;

	cvtdq2ps xmm0, xmm0
	divss	xmm1, xmm0
	movss	DWORD PTR [rcx+28], xmm1

; 88   : 	computeIncrement();
; 89   : }

	ret	0
?setSampleRate@LFO@@UEAAXH@Z ENDP			; LFO::setSampleRate
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LFO.cpp
;	COMDAT ?processAudio@LFO@@UEAAMXZ
_TEXT	SEGMENT
this$ = 8
?processAudio@LFO@@UEAAMXZ PROC				; LFO::processAudio, COMDAT

; 94   : 	// Read the LFO value to be returned
; 95   : 	float yn;
; 96   : 	int readIndex = (int)lfo_counter;

	movss	xmm1, DWORD PTR [rcx+24]

; 97   : 	float frac = lfo_counter - readIndex;
; 98   : 	int readIndexNext = (readIndex + 1 >= WAVETABLE_SIZE) ? 0 : readIndex + 1;

	xor	r11d, r11d
	cvttss2si r10d, xmm1
	mov	r8, rcx

; 99   : 
; 100  : 	switch (lfo_waveform) {

	mov	ecx, DWORD PTR [rcx+20]
	movaps	xmm3, xmm1
	lea	r9d, DWORD PTR [r10+1]
	movd	xmm0, r10d
	cmp	r9d, 2048				; 00000800H
	cvtdq2ps xmm0, xmm0
	cmovge	r9d, r11d
	subss	xmm3, xmm0
	test	ecx, ecx
	je	SHORT $LN4@processAud
	sub	ecx, 1
	je	SHORT $LN5@processAud
	sub	ecx, 1
	je	SHORT $LN6@processAud
	cmp	ecx, 1
	je	SHORT $LN7@processAud

; 113  : 	default:
; 114  : 		yn = 0.0;

	xorps	xmm2, xmm2
	jmp	SHORT $LN11@processAud
$LN7@processAud:

; 110  : 	case OscillatorType::Pulse:
; 111  : 		yn = linearInterp(0, 1, lfo_pulse[readIndex], lfo_pulse[readIndexNext], frac);		

	mov	rdx, QWORD PTR [r8+56]

; 112  : 		break;

	jmp	SHORT $LN26@processAud
$LN6@processAud:

; 107  : 	case OscillatorType::Triangular:
; 108  : 		yn = linearInterp(0, 1, lfo_triangular[readIndex], lfo_triangular[readIndexNext], frac);

	mov	rdx, QWORD PTR [r8+48]

; 109  : 		break;	

	jmp	SHORT $LN26@processAud
$LN5@processAud:

; 103  : 		break;	
; 104  : 	case OscillatorType::Sine:
; 105  : 		yn = linearInterp(0, 1, lfo_sine[readIndex], lfo_sine[readIndexNext], frac);

	mov	rdx, QWORD PTR [r8+40]

; 106  : 		break;	

	jmp	SHORT $LN26@processAud
$LN4@processAud:

; 101  : 	case OscillatorType::Saw:
; 102  : 		yn = linearInterp(0, 1, lfo_saw[readIndex], lfo_saw[readIndexNext], frac);		

	mov	rdx, QWORD PTR [r8+32]
$LN26@processAud:

; 80   : 	lfo_counter += lfo_inc;

	movss	xmm0, DWORD PTR __real@3f800000
	movaps	xmm2, xmm3
	subss	xmm0, xmm3
	movsxd	rax, r10d
	movsxd	rcx, r9d
	mulss	xmm0, DWORD PTR [rdx+rax*4]
	mulss	xmm2, DWORD PTR [rdx+rcx*4]
	addss	xmm2, xmm0
$LN11@processAud:
	addss	xmm1, DWORD PTR [r8+28]

; 81   : 	if (lfo_counter >= WAVETABLE_SIZE)

	movss	xmm0, DWORD PTR __real@45000000
	comiss	xmm1, xmm0
	movss	DWORD PTR [r8+24], xmm1
	jb	SHORT $LN24@processAud

; 82   : 		lfo_counter -= WAVETABLE_SIZE;

	subss	xmm1, xmm0
	movss	DWORD PTR [r8+24], xmm1
$LN24@processAud:

; 115  : 	}
; 116  : 
; 117  : 	// Increase lfo counter
; 118  : 	increaseLFOCounter();
; 119  : 
; 120  : 	// unipolar lfo
; 121  : 	if (lfo_unipolar) {

	cmp	BYTE PTR [r8+64], r11b
	je	SHORT $LN9@processAud

; 122  : 		yn /= 2.0;

	mulss	xmm2, DWORD PTR __real@3f000000

; 123  : 		yn += 0.5;

	addss	xmm2, DWORD PTR __real@3f000000
$LN9@processAud:

; 124  : 	}
; 125  : 	// Return LFO value
; 126  : 	return yn * lfo_amplitude;

	mulss	xmm2, DWORD PTR [r8+16]
	movaps	xmm0, xmm2

; 127  : 
; 128  : }

	ret	0
?processAudio@LFO@@UEAAMXZ ENDP				; LFO::processAudio
_TEXT	ENDS
END
