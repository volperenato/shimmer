; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30145.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	??_L@YAXPEAX_K1P6AX0@Z2@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	??_M@YAXPEAX_K1P6AX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??_V@YAXPEAX_K@Z:PROC				; operator delete[]
PUBLIC	?processAudio@Freeverb@@QEAAXPEAM0@Z		; Freeverb::processAudio
PUBLIC	?updateReverbParameters@Freeverb@@QEAAXXZ	; Freeverb::updateReverbParameters
PUBLIC	?setAllPassFiltersDelay@Freeverb@@QEAAXXZ	; Freeverb::setAllPassFiltersDelay
PUBLIC	?setCombFiltersDelay@Freeverb@@QEAAXXZ		; Freeverb::setCombFiltersDelay
PUBLIC	?setReverbSpread@Freeverb@@QEAAXM@Z		; Freeverb::setReverbSpread
PUBLIC	?setReverbPreDelayInMilliseconds@Freeverb@@QEAAXM@Z ; Freeverb::setReverbPreDelayInMilliseconds
PUBLIC	?setReverbDampingFrequency@Freeverb@@QEAAXM@Z	; Freeverb::setReverbDampingFrequency
PUBLIC	?setReverbDecayInSeconds@Freeverb@@QEAAXM@Z	; Freeverb::setReverbDecayInSeconds
PUBLIC	?setReverbSmearing@Freeverb@@QEAAXM@Z		; Freeverb::setReverbSmearing
PUBLIC	?setReverbWet@Freeverb@@QEAAXM@Z		; Freeverb::setReverbWet
PUBLIC	?setSampleRate@Freeverb@@QEAAXH@Z		; Freeverb::setSampleRate
PUBLIC	?init@Freeverb@@QEAAXHMMMMMM@Z			; Freeverb::init
PUBLIC	??_GAllPassFilter@@QEAAPEAXI@Z			; AllPassFilter::`scalar deleting destructor'
PUBLIC	??_GLPCombFilter@@QEAAPEAXI@Z			; LPCombFilter::`scalar deleting destructor'
PUBLIC	??_GCombFilter@@QEAAPEAXI@Z			; CombFilter::`scalar deleting destructor'
PUBLIC	??1Freeverb@@QEAA@XZ				; Freeverb::~Freeverb
PUBLIC	??0Freeverb@@QEAA@XZ				; Freeverb::Freeverb
PUBLIC	?mapValueIntoRange@@YAMMMM@Z			; mapValueIntoRange
;	COMDAT pdata
pdata	SEGMENT
$pdata$?processAudio@Freeverb@@QEAAXPEAM0@Z DD imagerel $LN25
	DD	imagerel $LN25+476
	DD	imagerel $unwind$?processAudio@Freeverb@@QEAAXPEAM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setAllPassFiltersDelay@Freeverb@@QEAAXXZ DD imagerel $LN34
	DD	imagerel $LN34+305
	DD	imagerel $unwind$?setAllPassFiltersDelay@Freeverb@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setCombFiltersDelay@Freeverb@@QEAAXXZ DD imagerel $LN19
	DD	imagerel $LN19+161
	DD	imagerel $unwind$?setCombFiltersDelay@Freeverb@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setReverbDampingFrequency@Freeverb@@QEAAXM@Z DD imagerel $LN19
	DD	imagerel $LN19+104
	DD	imagerel $unwind$?setReverbDampingFrequency@Freeverb@@QEAAXM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setReverbDecayInSeconds@Freeverb@@QEAAXM@Z DD imagerel $LN11
	DD	imagerel $LN11+88
	DD	imagerel $unwind$?setReverbDecayInSeconds@Freeverb@@QEAAXM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setSampleRate@Freeverb@@QEAAXH@Z DD imagerel $LN25
	DD	imagerel $LN25+266
	DD	imagerel $unwind$?setSampleRate@Freeverb@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?init@Freeverb@@QEAAXHMMMMMM@Z DD imagerel $LN112
	DD	imagerel $LN112+1044
	DD	imagerel $unwind$?init@Freeverb@@QEAAXHMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GAllPassFilter@@QEAAPEAXI@Z DD imagerel $LN9
	DD	imagerel $LN9+33
	DD	imagerel $unwind$??_GAllPassFilter@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GLPCombFilter@@QEAAPEAXI@Z DD imagerel $LN15
	DD	imagerel $LN15+50
	DD	imagerel $unwind$??_GLPCombFilter@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GCombFilter@@QEAAPEAXI@Z DD imagerel $LN9
	DD	imagerel $LN9+33
	DD	imagerel $unwind$??_GCombFilter@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Freeverb@@QEAA@XZ DD imagerel $LN80
	DD	imagerel $LN80+248
	DD	imagerel $unwind$??1Freeverb@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Freeverb@@QEAA@XZ DD imagerel $LN30
	DD	imagerel $LN30+588
	DD	imagerel $unwind$??0Freeverb@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA+29
	DD	imagerel $unwind$?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA DD imagerel ?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA
	DD	imagerel ?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA+29
	DD	imagerel $unwind$?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA DD imagerel ?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA
	DD	imagerel ?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA+29
	DD	imagerel $unwind$?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA DD imagerel ?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA
	DD	imagerel ?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA+29
	DD	imagerel $unwind$?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA DD imagerel ?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA
	DD	imagerel ?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA+29
	DD	imagerel $unwind$?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA DD imagerel ?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA
	DD	imagerel ?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA+29
	DD	imagerel $unwind$?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Freeverb@@QEAA@XZ DB 01aH
	DB	'R'
	DB	00H
	DB	0a0H
	DB	02H
	DB	'`'
	DB	00H
	DB	'"'
	DB	04H
	DB	'B'
	DB	00H
	DB	'*'
	DB	06H
	DB	'h'
	DB	00H
	DB	'('
	DB	08H
	DB	':'
	DB	00H
	DB	'('
	DB	0aH
	DB	':'
	DB	00H
	DB	'('
	DB	0cH
	DB	':'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Freeverb@@QEAA@XZ DB 0cH
	DB	0eH
	DD	imagerel ?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA
	DB	036H
	DD	imagerel ?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA
	DB	05eH
	DD	imagerel ?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA
	DB	086H
	DD	imagerel ?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA
	DB	0aeH
	DD	imagerel ?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA
	DB	0d6H
	DD	imagerel ?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0Freeverb@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0Freeverb@@QEAA@XZ
	DD	imagerel $ip2state$??0Freeverb@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Freeverb@@QEAA@XZ DD 0a1611H
	DD	0e5416H
	DD	0d3416H
	DD	0f0125216H
	DD	0c00ee010H
	DD	0600b700cH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0Freeverb@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Freeverb@@QEAA@XZ DD 0a1901H
	DD	097419H
	DD	086419H
	DD	075419H
	DD	063419H
	DD	0e0153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GCombFilter@@QEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GLPCombFilter@@QEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GAllPassFilter@@QEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?init@Freeverb@@QEAAXHMMMMMM@Z DD 0103a01H
	DD	02883aH
	DD	037835H
	DD	04682eH
	DD	0106418H
	DD	0f5418H
	DD	0e3418H
	DD	0f0149218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setSampleRate@Freeverb@@QEAAXH@Z DD 0c1d01H
	DD	0b741dH
	DD	0a641dH
	DD	09541dH
	DD	08341dH
	DD	0f019321dH
	DD	0c015e017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setReverbDecayInSeconds@Freeverb@@QEAAXM@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setReverbDampingFrequency@Freeverb@@QEAAXM@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setCombFiltersDelay@Freeverb@@QEAAXXZ DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setAllPassFiltersDelay@Freeverb@@QEAAXXZ DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?processAudio@Freeverb@@QEAAXPEAM0@Z DD 0185101H
	DD	02b851H
	DD	03a847H
	DD	049842H
	DD	05883aH
	DD	067832H
	DD	076824H
	DD	0177420H
	DD	0166420H
	DD	0155420H
	DD	0143420H
	DD	0f019f220H
	DD	0c015e017H
?MAX_LPF_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMAX_LPF_FREQUENCY_LOG@@YAXXZ ; MAX_LPF_FREQUENCY_LOG$initializer$
?MIN_LPF_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMIN_LPF_FREQUENCY_LOG@@YAXXZ ; MIN_LPF_FREQUENCY_LOG$initializer$
?MAX_HPF_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMAX_HPF_FREQUENCY_LOG@@YAXXZ ; MAX_HPF_FREQUENCY_LOG$initializer$
?MIN_HPF_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMIN_HPF_FREQUENCY_LOG@@YAXXZ ; MIN_HPF_FREQUENCY_LOG$initializer$
?MAX_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMAX_FREQUENCY_LOG@@YAXXZ ; MAX_FREQUENCY_LOG$initializer$
?MIN_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMIN_FREQUENCY_LOG@@YAXXZ ; MIN_FREQUENCY_LOG$initializer$
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
;	COMDAT ??__EMAX_LPF_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMAX_LPF_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MAX_LPF_FREQUENCY_LOG'', COMDAT

; 12   : const float MAX_LPF_FREQUENCY_LOG = log(MAX_LPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@40d28e0000000000
	rex_jmp	QWORD PTR __imp_log
??__EMAX_LPF_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MAX_LPF_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
;	COMDAT ??__EMIN_LPF_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMIN_LPF_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MIN_LPF_FREQUENCY_LOG'', COMDAT

; 13   : const float MIN_LPF_FREQUENCY_LOG = log(MIN_LPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@4034000000000000
	rex_jmp	QWORD PTR __imp_log
??__EMIN_LPF_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MIN_LPF_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
;	COMDAT ??__EMAX_HPF_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMAX_HPF_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MAX_HPF_FREQUENCY_LOG'', COMDAT

; 14   : const float MAX_HPF_FREQUENCY_LOG = log(MAX_HPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@40d09a0000000000
	rex_jmp	QWORD PTR __imp_log
??__EMAX_HPF_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MAX_HPF_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
;	COMDAT ??__EMIN_HPF_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMIN_HPF_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MIN_HPF_FREQUENCY_LOG'', COMDAT

; 15   : const float MIN_HPF_FREQUENCY_LOG = log(MIN_HPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@4024000000000000
	rex_jmp	QWORD PTR __imp_log
??__EMIN_HPF_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MIN_HPF_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
;	COMDAT ??__EMAX_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMAX_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MAX_FREQUENCY_LOG'', COMDAT

; 16   : const float MAX_FREQUENCY_LOG = log(MAX_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@40d3880000000000
	rex_jmp	QWORD PTR __imp_log
??__EMAX_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MAX_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
;	COMDAT ??__EMIN_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMIN_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MIN_FREQUENCY_LOG'', COMDAT

; 17   : const float MIN_FREQUENCY_LOG = log(MIN_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@4034000000000000
	rex_jmp	QWORD PTR __imp_log
??__EMIN_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MIN_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
;	COMDAT ?mapValueIntoRange@@YAMMMM@Z
_TEXT	SEGMENT
value$ = 8
minvalue$ = 16
maxValue$ = 24
?mapValueIntoRange@@YAMMMM@Z PROC			; mapValueIntoRange, COMDAT

; 23   :     return minvalue + value * (maxValue - minvalue);

	subss	xmm2, xmm1
	mulss	xmm2, xmm0
	addss	xmm2, xmm1
	movaps	xmm0, xmm2

; 24   : }

	ret	0
?mapValueIntoRange@@YAMMMM@Z ENDP			; mapValueIntoRange
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\CombFilter.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ??0Freeverb@@QEAA@XZ
_TEXT	SEGMENT
$T13 = 96
$T11 = 96
$T9 = 96
$T7 = 96
$T5 = 96
$T3 = 96
$T1 = 96
this$ = 96
??0Freeverb@@QEAA@XZ PROC				; Freeverb::Freeverb, COMDAT

; 19   : Freeverb::Freeverb() {

$LN30:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx

; 20   :     freeverb_wet      = 0.0;

	xor	ebx, ebx
	mov	QWORD PTR [rcx], rbx

; 21   :     freeverb_smearing = 0.0;
; 22   :     freeverb_decaySeconds    = 0.0;

	mov	QWORD PTR [rcx+8], rbx

; 23   :     freeverb_dampingFrequency  = 0.0;
; 24   :     freeverb_preDelayMilliSeconds = 0.0;

	mov	QWORD PTR [rcx+16], rbx

; 29   :     preDelayModule = new CombFilter();

	lea	ecx, QWORD PTR [rbx+72]
	call	??2@YAPEAX_K@Z				; operator new
	mov	QWORD PTR $T1[rsp], rax
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 8    : 	dly_buffer				= NULL;

	mov	QWORD PTR [rax+40], rbx

; 9    : 	dly_makeUpGaindB		= 0.0;

	mov	DWORD PTR [rax+48], ebx

; 10   : 	dly_makeUpGain			= 1.0;

	mov	QWORD PTR [rax+52], 1065353216		; 3f800000H

; 11   : 	dly_delayInmsec			= 0.0;
; 12   : 	dly_delayInSamples		= 0.0;

	mov	QWORD PTR [rax+20], rbx

; 13   : 	dly_readIndex			= 0;

	mov	QWORD PTR [rax+28], rbx

; 14   : 	dly_writeIndex			= 0;
; 15   : 	dly_lineLengthInSamples = 0;

	mov	QWORD PTR [rax+12], rbx
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\CombFilter.cpp

; 7    : {

	lea	rcx, OFFSET FLAT:??_7CombFilter@@6B@
	mov	QWORD PTR [rax], rcx

; 8    : 	cf_feedbackGain     = 0.0;
; 9    : 	cf_decayInSeconds   = 0.0;

	mov	DWORD PTR [rax+60], ebx

; 10   : 	cf_feedbackGainSign = 1;

	mov	DWORD PTR [rax+64], 1
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 29   :     preDelayModule = new CombFilter();

	mov	QWORD PTR [rdi+40], rax

; 30   : 
; 31   :     /*.......................................*/
; 32   :     // allocate comb filters
; 33   :     combFiltersL = new LPCombFilter[NUM_COMB_FILTERS];

	mov	r14d, 712				; 000002c8H
	mov	ecx, r14d
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T3[rsp], rax
	lea	r15d, QWORD PTR [rbx+8]
	mov	QWORD PTR [rax], r15
	lea	rbx, QWORD PTR [rax+8]
	lea	rbp, OFFSET FLAT:??1LPCombFilter@@QEAA@XZ ; LPCombFilter::~LPCombFilter
	mov	QWORD PTR [rsp+32], rbp
	lea	r9, OFFSET FLAT:??0LPCombFilter@@QEAA@XZ ; LPCombFilter::LPCombFilter
	mov	r8d, r15d
	lea	esi, QWORD PTR [r15+80]
	mov	edx, esi
	mov	rcx, rbx
	call	??_L@YAXPEAX_K1P6AX0@Z2@Z
	npad	1
	mov	QWORD PTR [rdi+48], rbx

; 34   :     combFiltersR = new LPCombFilter[NUM_COMB_FILTERS];

	mov	ecx, r14d
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T5[rsp], rax
	mov	QWORD PTR [rax], r15
	lea	rbx, QWORD PTR [rax+8]
	mov	QWORD PTR [rsp+32], rbp
	lea	r9, OFFSET FLAT:??0LPCombFilter@@QEAA@XZ ; LPCombFilter::LPCombFilter
	mov	r8d, r15d
	mov	edx, esi
	mov	rcx, rbx
	call	??_L@YAXPEAX_K1P6AX0@Z2@Z
	npad	1
	mov	QWORD PTR [rdi+56], rbx

; 35   : 
; 36   :     /*.......................................*/
; 37   :     // allocate all pass lines
; 38   :     apFiltersL_input  = new AllPassFilter[NUM_ALLPASS_FILTERS_IN];

	lea	r15d, QWORD PTR [rsi+112]
	mov	ecx, r15d
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T7[rsp], rax
	lea	r12d, QWORD PTR [rsi-85]
	mov	QWORD PTR [rax], r12
	lea	rbx, QWORD PTR [rax+8]
	lea	r14, OFFSET FLAT:??1AllPassFilter@@QEAA@XZ ; AllPassFilter::~AllPassFilter
	mov	QWORD PTR [rsp+32], r14
	lea	rbp, OFFSET FLAT:??0AllPassFilter@@QEAA@XZ ; AllPassFilter::AllPassFilter
	mov	r9, rbp
	mov	r8d, r12d
	lea	esi, QWORD PTR [r12+61]
	mov	edx, esi
	mov	rcx, rbx
	call	??_L@YAXPEAX_K1P6AX0@Z2@Z
	npad	1
	mov	QWORD PTR [rdi+128], rbx

; 39   :     apFiltersR_input  = new AllPassFilter[NUM_ALLPASS_FILTERS_IN];

	mov	ecx, r15d
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T9[rsp], rax
	mov	QWORD PTR [rax], r12
	lea	rbx, QWORD PTR [rax+8]
	mov	QWORD PTR [rsp+32], r14
	mov	r9, rbp
	mov	r8d, r12d
	mov	edx, esi
	mov	rcx, rbx
	call	??_L@YAXPEAX_K1P6AX0@Z2@Z
	npad	1
	mov	QWORD PTR [rdi+136], rbx

; 40   :     apFiltersL_output = new AllPassFilter[NUM_ALLPASS_FILTERS_OUT];

	mov	ecx, r15d
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T11[rsp], rax
	mov	QWORD PTR [rax], r12
	lea	rbx, QWORD PTR [rax+8]
	mov	QWORD PTR [rsp+32], r14
	mov	r9, rbp
	mov	r8d, r12d
	mov	edx, esi
	mov	rcx, rbx
	call	??_L@YAXPEAX_K1P6AX0@Z2@Z
	npad	1
	mov	QWORD PTR [rdi+144], rbx

; 41   :     apFiltersR_output = new AllPassFilter[NUM_ALLPASS_FILTERS_OUT];

	mov	ecx, r15d
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T13[rsp], rax
	mov	QWORD PTR [rax], r12
	lea	rbx, QWORD PTR [rax+8]
	mov	QWORD PTR [rsp+32], r14
	mov	r9, rbp
	mov	r8d, r12d
	mov	edx, esi
	mov	rcx, rbx
	call	??_L@YAXPEAX_K1P6AX0@Z2@Z
	npad	1
	mov	QWORD PTR [rdi+152], rbx

; 42   : 
; 43   :     /*.......................................*/
; 44   :     // init CombFilters delay values
; 45   :     combFilterDlymsLeft[0] = 25.31; // 29.7;

	mov	DWORD PTR [rdi+96], 1103788769		; 41ca7ae1H

; 46   :     combFilterDlymsLeft[1] = 26.94; // 37.1;

	mov	DWORD PTR [rdi+100], 1104643359		; 41d7851fH

; 47   :     combFilterDlymsLeft[2] = 28.96; // 41.1;

	mov	DWORD PTR [rdi+104], 1105702420		; 41e7ae14H

; 48   :     combFilterDlymsLeft[3] = 30.75; // 43.7;

	mov	DWORD PTR [rdi+108], 1106640896		; 41f60000H

; 49   :     combFilterDlymsLeft[4] = 32.24; // 31.3;

	mov	DWORD PTR [rdi+112], 1107359171		; 4200f5c3H

; 50   :     combFilterDlymsLeft[5] = 33.81; // 31.7;

	mov	DWORD PTR [rdi+116], 1107770737		; 42073d71H

; 51   :     combFilterDlymsLeft[6] = 35.31; // 37.7;

	mov	DWORD PTR [rdi+120], 1108163953		; 420d3d71H

; 52   :     combFilterDlymsLeft[7] = 36.70; // 41.7;

	mov	DWORD PTR [rdi+124], 1108528333		; 4212cccdH

; 53   : 
; 54   :     /*.......................................*/
; 55   :     // init AllPass delay values
; 56   :     allPassDlymsLeft_input[0] = 1.1;

	mov	DWORD PTR [rdi+172], 1066192077		; 3f8ccccdH

; 57   :     allPassDlymsLeft_input[1] = 2.3;

	mov	DWORD PTR [rdi+176], 1075000115		; 40133333H

; 58   :     allPassDlymsLeft_input[2] = 4.7;

	mov	DWORD PTR [rdi+180], 1083598438		; 40966666H

; 59   :     allPassDlymsLeft_output[0] = 7.73; // 1.1;

	mov	DWORD PTR [rdi+196], 1089952809		; 40f75c29H

; 60   :     allPassDlymsLeft_output[1] = 10.00; // 2.3;

	mov	DWORD PTR [rdi+200], 1092616192		; 41200000H

; 61   :     allPassDlymsLeft_output[2] = 12.61; // 4.7;

	mov	DWORD PTR [rdi+204], 1095352975		; 4149c28fH

; 62   : }

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+104]
	mov	rbp, QWORD PTR [rsp+112]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
??0Freeverb@@QEAA@XZ ENDP				; Freeverb::Freeverb
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T13 = 96
$T11 = 96
$T9 = 96
$T7 = 96
$T5 = 96
$T3 = 96
$T1 = 96
this$ = 96
?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA PROC		; `Freeverb::Freeverb'::`1'::dtor$1
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 712				; 000002c8H
	mov	rcx, QWORD PTR $T3[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA ENDP		; `Freeverb::Freeverb'::`1'::dtor$1
$T13 = 96
$T11 = 96
$T9 = 96
$T7 = 96
$T5 = 96
$T3 = 96
$T1 = 96
this$ = 96
?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA PROC		; `Freeverb::Freeverb'::`1'::dtor$2
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 712				; 000002c8H
	mov	rcx, QWORD PTR $T5[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA ENDP		; `Freeverb::Freeverb'::`1'::dtor$2
$T13 = 96
$T11 = 96
$T9 = 96
$T7 = 96
$T5 = 96
$T3 = 96
$T1 = 96
this$ = 96
?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA PROC		; `Freeverb::Freeverb'::`1'::dtor$3
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 200				; 000000c8H
	mov	rcx, QWORD PTR $T7[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA ENDP		; `Freeverb::Freeverb'::`1'::dtor$3
$T13 = 96
$T11 = 96
$T9 = 96
$T7 = 96
$T5 = 96
$T3 = 96
$T1 = 96
this$ = 96
?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA PROC		; `Freeverb::Freeverb'::`1'::dtor$4
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 200				; 000000c8H
	mov	rcx, QWORD PTR $T9[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA ENDP		; `Freeverb::Freeverb'::`1'::dtor$4
$T13 = 96
$T11 = 96
$T9 = 96
$T7 = 96
$T5 = 96
$T3 = 96
$T1 = 96
this$ = 96
?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA PROC		; `Freeverb::Freeverb'::`1'::dtor$5
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 200				; 000000c8H
	mov	rcx, QWORD PTR $T11[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA ENDP		; `Freeverb::Freeverb'::`1'::dtor$5
$T13 = 96
$T11 = 96
$T9 = 96
$T7 = 96
$T5 = 96
$T3 = 96
$T1 = 96
this$ = 96
?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA PROC		; `Freeverb::Freeverb'::`1'::dtor$6
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 200				; 000000c8H
	mov	rcx, QWORD PTR $T13[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA ENDP		; `Freeverb::Freeverb'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Ogspy
;	COMDAT text$x
text$x	SEGMENT
$T13 = 96
$T11 = 96
$T9 = 96
$T7 = 96
$T5 = 96
$T3 = 96
$T1 = 96
this$ = 96
?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA PROC		; `Freeverb::Freeverb'::`1'::dtor$1
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 712				; 000002c8H
	mov	rcx, QWORD PTR $T3[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$1@?0???0Freeverb@@QEAA@XZ@4HA ENDP		; `Freeverb::Freeverb'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogspy
;	COMDAT text$x
text$x	SEGMENT
$T13 = 96
$T11 = 96
$T9 = 96
$T7 = 96
$T5 = 96
$T3 = 96
$T1 = 96
this$ = 96
?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA PROC		; `Freeverb::Freeverb'::`1'::dtor$2
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 712				; 000002c8H
	mov	rcx, QWORD PTR $T5[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$2@?0???0Freeverb@@QEAA@XZ@4HA ENDP		; `Freeverb::Freeverb'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogspy
;	COMDAT text$x
text$x	SEGMENT
$T13 = 96
$T11 = 96
$T9 = 96
$T7 = 96
$T5 = 96
$T3 = 96
$T1 = 96
this$ = 96
?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA PROC		; `Freeverb::Freeverb'::`1'::dtor$3
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 200				; 000000c8H
	mov	rcx, QWORD PTR $T7[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$3@?0???0Freeverb@@QEAA@XZ@4HA ENDP		; `Freeverb::Freeverb'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogspy
;	COMDAT text$x
text$x	SEGMENT
$T13 = 96
$T11 = 96
$T9 = 96
$T7 = 96
$T5 = 96
$T3 = 96
$T1 = 96
this$ = 96
?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA PROC		; `Freeverb::Freeverb'::`1'::dtor$4
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 200				; 000000c8H
	mov	rcx, QWORD PTR $T9[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$4@?0???0Freeverb@@QEAA@XZ@4HA ENDP		; `Freeverb::Freeverb'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Ogspy
;	COMDAT text$x
text$x	SEGMENT
$T13 = 96
$T11 = 96
$T9 = 96
$T7 = 96
$T5 = 96
$T3 = 96
$T1 = 96
this$ = 96
?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA PROC		; `Freeverb::Freeverb'::`1'::dtor$5
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 200				; 000000c8H
	mov	rcx, QWORD PTR $T11[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$5@?0???0Freeverb@@QEAA@XZ@4HA ENDP		; `Freeverb::Freeverb'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Ogspy
;	COMDAT text$x
text$x	SEGMENT
$T13 = 96
$T11 = 96
$T9 = 96
$T7 = 96
$T5 = 96
$T3 = 96
$T1 = 96
this$ = 96
?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA PROC		; `Freeverb::Freeverb'::`1'::dtor$6
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	edx, 200				; 000000c8H
	mov	rcx, QWORD PTR $T13[rbp]
	call	??_V@YAXPEAX_K@Z			; operator delete[]
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$6@?0???0Freeverb@@QEAA@XZ@4HA ENDP		; `Freeverb::Freeverb'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\CombFilter.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\CombFilter.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LPCombFilter.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\CombFilter.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LPCombFilter.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\CombFilter.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\AllPassFilter.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\AllPassFilter.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\AllPassFilter.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\AllPassFilter.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ??1Freeverb@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1Freeverb@@QEAA@XZ PROC				; Freeverb::~Freeverb, COMDAT

; 67   : Freeverb::~Freeverb() {

$LN80:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rbp
	mov	QWORD PTR [rax+24], rsi
	mov	QWORD PTR [rax+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\CombFilter.cpp

; 14   : CombFilter::~CombFilter() {}

	lea	rbp, OFFSET FLAT:??_7CombFilter@@6B@
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 69   :     preDelayModule->~CombFilter();

	mov	rcx, QWORD PTR [rcx+40]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\CombFilter.cpp

; 14   : CombFilter::~CombFilter() {}

	mov	QWORD PTR [rcx], rbp
	call	??1Delay@@QEAA@XZ			; Delay::~Delay
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 69   :     preDelayModule->~CombFilter();

	xor	ebx, ebx
	lea	r14, OFFSET FLAT:??_7LPFButterworth@@6B@
	mov	esi, ebx
$LL4@Freeverb:

; 73   :         combFiltersL[i].~LPCombFilter();

	mov	rcx, QWORD PTR [rdi+48]
	add	rcx, rsi
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LPCombFilter.cpp

; 15   : 	lpcf_feedbackLPF->~LPFButterworth();

	mov	rax, QWORD PTR [rcx+72]
	mov	QWORD PTR [rax], r14
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\CombFilter.cpp

; 14   : CombFilter::~CombFilter() {}

	mov	QWORD PTR [rcx], rbp
	call	??1Delay@@QEAA@XZ			; Delay::~Delay
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 74   :         combFiltersR[i].~LPCombFilter();

	mov	rcx, QWORD PTR [rdi+56]
	add	rcx, rsi
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LPCombFilter.cpp

; 15   : 	lpcf_feedbackLPF->~LPFButterworth();

	mov	rax, QWORD PTR [rcx+72]
	mov	QWORD PTR [rax], r14
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\CombFilter.cpp

; 14   : CombFilter::~CombFilter() {}

	mov	QWORD PTR [rcx], rbp
	call	??1Delay@@QEAA@XZ			; Delay::~Delay
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 72   :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	add	rsi, 88					; 00000058H
	cmp	rsi, 704				; 000002c0H
	jl	SHORT $LL4@Freeverb
	mov	rsi, rbx
	lea	rbp, OFFSET FLAT:??_7AllPassFilter@@6B@
	mov	r14d, 192				; 000000c0H
$LL7@Freeverb:

; 79   :         apFiltersL_input[i].~AllPassFilter();

	mov	rcx, QWORD PTR [rdi+128]
	add	rcx, rsi
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\AllPassFilter.cpp

; 10   : AllPassFilter::~AllPassFilter() {}

	mov	QWORD PTR [rcx], rbp
	call	??1Delay@@QEAA@XZ			; Delay::~Delay
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 80   :         apFiltersR_input[i].~AllPassFilter();

	mov	rcx, QWORD PTR [rdi+136]
	add	rcx, rsi
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\AllPassFilter.cpp

; 10   : AllPassFilter::~AllPassFilter() {}

	mov	QWORD PTR [rcx], rbp
	call	??1Delay@@QEAA@XZ			; Delay::~Delay
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 78   :     for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {

	add	rsi, 64					; 00000040H
	cmp	rsi, r14
	jl	SHORT $LL7@Freeverb
$LL10@Freeverb:

; 84   :         apFiltersL_output[i].~AllPassFilter();

	mov	rcx, QWORD PTR [rdi+144]
	add	rcx, rbx
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\AllPassFilter.cpp

; 10   : AllPassFilter::~AllPassFilter() {}

	mov	QWORD PTR [rcx], rbp
	call	??1Delay@@QEAA@XZ			; Delay::~Delay
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 85   :         apFiltersR_output[i].~AllPassFilter();

	mov	rcx, QWORD PTR [rdi+152]
	add	rcx, rbx
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\AllPassFilter.cpp

; 10   : AllPassFilter::~AllPassFilter() {}

	mov	QWORD PTR [rcx], rbp
	call	??1Delay@@QEAA@XZ			; Delay::~Delay
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 83   :     for (int i = 0; i < NUM_ALLPASS_FILTERS_OUT; i++) {

	add	rbx, 64					; 00000040H
	cmp	rbx, r14
	jl	SHORT $LL10@Freeverb

; 86   :     }    
; 87   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
??1Freeverb@@QEAA@XZ ENDP				; Freeverb::~Freeverb
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\CombFilter.cpp
;	COMDAT ??_GCombFilter@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_GCombFilter@@QEAAPEAXI@Z PROC			; CombFilter::`scalar deleting destructor', COMDAT
$LN9:
	push	rbx
	sub	rsp, 32					; 00000020H

; 14   : CombFilter::~CombFilter() {}

	lea	rax, OFFSET FLAT:??_7CombFilter@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	call	??1Delay@@QEAA@XZ			; Delay::~Delay
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_GCombFilter@@QEAAPEAXI@Z ENDP			; CombFilter::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LPCombFilter.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\CombFilter.cpp
;	COMDAT ??_GLPCombFilter@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_GLPCombFilter@@QEAAPEAXI@Z PROC			; LPCombFilter::`scalar deleting destructor', COMDAT
$LN15:
	push	rbx
	sub	rsp, 32					; 00000020H
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LPCombFilter.cpp

; 15   : 	lpcf_feedbackLPF->~LPFButterworth();

	mov	rax, QWORD PTR [rcx+72]
	mov	rbx, rcx
	lea	rcx, OFFSET FLAT:??_7LPFButterworth@@6B@
	mov	QWORD PTR [rax], rcx
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\CombFilter.cpp

; 14   : CombFilter::~CombFilter() {}

	lea	rax, OFFSET FLAT:??_7CombFilter@@6B@
	mov	rcx, rbx
	mov	QWORD PTR [rbx], rax
	call	??1Delay@@QEAA@XZ			; Delay::~Delay
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_GLPCombFilter@@QEAAPEAXI@Z ENDP			; LPCombFilter::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\AllPassFilter.cpp
;	COMDAT ??_GAllPassFilter@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_GAllPassFilter@@QEAAPEAXI@Z PROC			; AllPassFilter::`scalar deleting destructor', COMDAT
$LN9:
	push	rbx
	sub	rsp, 32					; 00000020H

; 10   : AllPassFilter::~AllPassFilter() {}

	lea	rax, OFFSET FLAT:??_7AllPassFilter@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax
	call	??1Delay@@QEAA@XZ			; Delay::~Delay
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_GAllPassFilter@@QEAAPEAXI@Z ENDP			; AllPassFilter::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?init@Freeverb@@QEAAXHMMMMMM@Z
_TEXT	SEGMENT
this$ = 112
sampleRate$ = 120
rwet$dead$ = 128
rdecay$ = 136
rdamping$ = 144
rsmearing$dead$ = 152
rspread$ = 160
rpredelay$dead$ = 168
?init@Freeverb@@QEAAXHMMMMMM@Z PROC			; Freeverb::init, COMDAT

; 93   : {    

$LN112:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rbp
	mov	QWORD PTR [rax+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 80					; 00000050H

; 94   :     /*.......................................*/
; 95   :     // init pre-delay
; 96   :     preDelayModule->init(MAX_PREDELAY_VALUE_IN_MS, sampleRate);

	movss	xmm1, DWORD PTR __real@43960000
	mov	rbx, rcx
	mov	rcx, QWORD PTR [rcx+40]
	mov	r8d, edx
	movaps	XMMWORD PTR [rax-40], xmm6
	mov	r15d, edx
	movaps	XMMWORD PTR [rax-56], xmm7
	movaps	XMMWORD PTR [rax-72], xmm8
	movaps	xmm8, xmm3
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax]

; 97   :     preDelayModule->setFeedback(0.0);

	mov	rax, QWORD PTR [rbx+40]
	xor	esi, esi
	movss	xmm6, DWORD PTR __real@42c80000
	xor	edi, edi
	and	DWORD PTR [rax+56], 0
	lea	r14d, QWORD PTR [rsi+8]
	xor	ebp, ebp
$LL4@init:

; 101  :         combFiltersL[i].init(MAX_COMB_FILTER_LENGTH_IN_MS, sampleRate);

	mov	rax, QWORD PTR [rbx+48]
	mov	r8d, r15d
	movaps	xmm1, xmm6
	mov	rdx, QWORD PTR [rax+rdi]
	lea	rcx, QWORD PTR [rax+rbp]
	call	QWORD PTR [rdx]

; 102  :         combFiltersL[i].setMakeUpGaindB(-12.0);

	mov	rcx, QWORD PTR [rbx+48]
	add	rcx, rdi
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 140  : 	dly_makeUpGaindB = gaindB;

	mov	DWORD PTR [rcx+48], -1052770304		; c1400000H

; 141  : 
; 142  : 	// update parameters
; 143  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 104  :         combFiltersR[i].init(MAX_COMB_FILTER_LENGTH_IN_MS, sampleRate);

	mov	rax, QWORD PTR [rbx+56]
	mov	r8d, r15d
	movaps	xmm1, xmm6
	mov	rdx, QWORD PTR [rax+rdi]
	lea	rcx, QWORD PTR [rax+rbp]
	call	QWORD PTR [rdx]

; 105  :         combFiltersR[i].setMakeUpGaindB(-12.0);

	mov	rcx, QWORD PTR [rbx+56]
	add	rcx, rdi
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 140  : 	dly_makeUpGaindB = gaindB;

	mov	DWORD PTR [rcx+48], -1052770304		; c1400000H

; 141  : 
; 142  : 	// update parameters
; 143  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 108  :         if (i > 0) {

	test	esi, esi
	je	SHORT $LN2@init

; 109  :             combFiltersL[i].setFeedbackToNegative();

	mov	rax, QWORD PTR [rbx+48]
	or	DWORD PTR [rax+rdi+64], -1

; 110  :             combFiltersR[i].setFeedbackToNegative();

	mov	rax, QWORD PTR [rbx+56]
	or	DWORD PTR [rdi+rax+64], -1
$LN2@init:

; 98   : 
; 99   :     // init comb filters
; 100  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	inc	esi
	add	rbp, 88					; 00000058H
	add	rdi, 88					; 00000058H
	cmp	esi, r14d
	jl	SHORT $LL4@init

; 250  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	movss	xmm6, DWORD PTR __real@3f800000
	lea	rdi, QWORD PTR [rbx+64]
	xor	esi, esi
$LL20@init:

; 251  :         combFilterDlymsRight[i] = combFilterDlymsLeft[i] + STEREO_SPREAD_COEFFICIENT_IN_MS;

	movss	xmm1, DWORD PTR [rdi+32]
	movaps	xmm0, xmm1
	addss	xmm0, xmm6
	movss	DWORD PTR [rdi], xmm0

; 252  :         combFiltersL[i].setDelayInmsec(combFilterDlymsLeft[i]);

	mov	rcx, QWORD PTR [rbx+48]
	add	rcx, rsi
	movd	xmm0, DWORD PTR [rcx+16]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+24], xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN97@init

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN97@init:

; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 253  :         combFiltersR[i].setDelayInmsec(combFilterDlymsRight[i]);

	mov	rcx, QWORD PTR [rbx+56]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 128  : 	dly_delayInmsec = delayInmsec;

	movss	xmm0, DWORD PTR [rdi]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 253  :         combFiltersR[i].setDelayInmsec(combFilterDlymsRight[i]);

	add	rcx, rsi
	movd	xmm1, DWORD PTR [rcx+16]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+24], xmm0
	comiss	xmm0, xmm1
	jbe	SHORT $LN98@init

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm1
$LN98@init:

; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 250  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	add	rdi, 4
	add	rsi, 88					; 00000058H
	sub	r14, 1
	jne	SHORT $LL20@init
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	xmm7, DWORD PTR __real@42480000
	xor	edi, edi
	xor	esi, esi
	lea	ebp, QWORD PTR [rdi+3]
	mov	r14d, ebp
$LL7@init:
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 119  :         apFiltersL_input[i].init(MAX_AP_FILTER_LENGTH_IN_MS, sampleRate);

	mov	rax, QWORD PTR [rbx+128]
	mov	r8d, r15d
	movaps	xmm1, xmm7
	mov	rdx, QWORD PTR [rax+rdi]
	lea	rcx, QWORD PTR [rax+rsi]
	call	QWORD PTR [rdx]

; 120  :         apFiltersR_input[i].init(MAX_AP_FILTER_LENGTH_IN_MS, sampleRate);

	mov	rax, QWORD PTR [rbx+136]
	mov	r8d, r15d
	movaps	xmm1, xmm7
	mov	rdx, QWORD PTR [rax+rdi]
	lea	rcx, QWORD PTR [rax+rsi]
	call	QWORD PTR [rdx]
	lea	rsi, QWORD PTR [rsi+64]
	lea	rdi, QWORD PTR [rdi+64]
	sub	r14, 1
	jne	SHORT $LL7@init
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	xor	edi, edi
	mov	r14, rbp
	xor	esi, esi
$LL10@init:
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 124  :         apFiltersL_output[i].init(MAX_AP_FILTER_LENGTH_IN_MS, sampleRate);

	mov	rax, QWORD PTR [rbx+144]
	mov	r8d, r15d
	movaps	xmm1, xmm7
	mov	rdx, QWORD PTR [rax+rdi]
	lea	rcx, QWORD PTR [rax+rsi]
	call	QWORD PTR [rdx]

; 125  :         apFiltersR_output[i].init(MAX_AP_FILTER_LENGTH_IN_MS, sampleRate);

	mov	rax, QWORD PTR [rbx+152]
	mov	r8d, r15d
	movaps	xmm1, xmm7
	mov	rdx, QWORD PTR [rax+rdi]
	lea	rcx, QWORD PTR [rax+rsi]
	call	QWORD PTR [rdx]
	lea	rsi, QWORD PTR [rsi+64]
	lea	rdi, QWORD PTR [rdi+64]
	sub	r14, 1
	jne	SHORT $LL10@init
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	xor	esi, esi
	lea	rdi, QWORD PTR [rbx+160]
	mov	r14, rbp
$LL31@init:
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 264  :         allPassDlymsRight_input[i] = allPassDlymsLeft_input[i] + STEREO_SPREAD_COEFFICIENT_IN_MS;

	movss	xmm1, DWORD PTR [rdi+12]
	movaps	xmm0, xmm1
	addss	xmm0, xmm6
	movss	DWORD PTR [rdi], xmm0

; 265  :         apFiltersL_input[i].setDelayInmsec(allPassDlymsLeft_input[i]);

	mov	rcx, QWORD PTR [rbx+128]
	add	rcx, rsi
	movd	xmm0, DWORD PTR [rcx+16]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+24], xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN99@init

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN99@init:

; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 266  :         apFiltersR_input[i].setDelayInmsec(allPassDlymsRight_input[i]);

	mov	rcx, QWORD PTR [rbx+136]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 128  : 	dly_delayInmsec = delayInmsec;

	movss	xmm0, DWORD PTR [rdi]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 266  :         apFiltersR_input[i].setDelayInmsec(allPassDlymsRight_input[i]);

	add	rcx, rsi
	movd	xmm1, DWORD PTR [rcx+16]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+24], xmm0
	comiss	xmm0, xmm1
	jbe	SHORT $LN100@init

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm1
$LN100@init:

; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 263  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {

	add	rdi, 4
	add	rsi, 64					; 00000040H
	sub	r14, 1
	jne	SHORT $LL31@init
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	xor	esi, esi
	lea	rdi, QWORD PTR [rbx+184]
$LL34@init:
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 270  :         allPassDlymsRight_output[i] = allPassDlymsLeft_output[i] + STEREO_SPREAD_COEFFICIENT_IN_MS;

	movss	xmm1, DWORD PTR [rdi+12]
	movaps	xmm0, xmm1
	addss	xmm0, xmm6
	movss	DWORD PTR [rdi], xmm0

; 271  :         apFiltersL_output[i].setDelayInmsec(allPassDlymsLeft_output[i]);

	mov	rcx, QWORD PTR [rbx+144]
	add	rcx, rsi
	movd	xmm0, DWORD PTR [rcx+16]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+24], xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN101@init

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN101@init:

; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 272  :         apFiltersR_output[i].setDelayInmsec(allPassDlymsRight_output[i]);

	mov	rcx, QWORD PTR [rbx+152]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 128  : 	dly_delayInmsec = delayInmsec;

	movss	xmm0, DWORD PTR [rdi]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 272  :         apFiltersR_output[i].setDelayInmsec(allPassDlymsRight_output[i]);

	add	rcx, rsi
	movd	xmm1, DWORD PTR [rcx+16]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+24], xmm0
	comiss	xmm0, xmm1
	jbe	SHORT $LN102@init

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm1
$LN102@init:

; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 269  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_OUT; i++) {

	add	rdi, 4
	add	rsi, 64					; 00000040H
	sub	rbp, 1
	jne	SHORT $LL34@init
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h

; 23   :     return minvalue + value * (maxValue - minvalue);

	movss	xmm1, DWORD PTR [rbx+20]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 134  :     setReverbDecayInSeconds(rdecay);

	mov	rcx, rbx

; 281  :     wet1 = freeverb_wet * (width / 2.0 + 0.5);

	movss	xmm7, DWORD PTR __real@3f000000
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h

; 23   :     return minvalue + value * (maxValue - minvalue);

	addss	xmm1, xmm1
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 283  :     dry = (1.0 - freeverb_wet);

	and	DWORD PTR [rbx+32], ebp

; 169  :     freeverb_wet = wet;

	mov	DWORD PTR [rbx], 1065353216		; 3f800000H
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h

; 23   :     return minvalue + value * (maxValue - minvalue);

	subss	xmm1, xmm6
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 281  :     wet1 = freeverb_wet * (width / 2.0 + 0.5);

	movaps	xmm0, xmm1
	addss	xmm0, xmm6
	mulss	xmm0, xmm7
	movss	DWORD PTR [rbx+24], xmm0

; 282  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	movaps	xmm0, xmm6
	subss	xmm0, xmm1

; 134  :     setReverbDecayInSeconds(rdecay);

	movaps	xmm1, xmm8

; 282  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	mulss	xmm0, xmm7
	movss	DWORD PTR [rbx+28], xmm0

; 134  :     setReverbDecayInSeconds(rdecay);

	call	?setReverbDecayInSeconds@Freeverb@@QEAAXM@Z ; Freeverb::setReverbDecayInSeconds

; 135  :     setReverbDampingFrequency(rdamping);

	movss	xmm1, DWORD PTR rdamping$[rsp]
	mov	rcx, rbx
	call	?setReverbDampingFrequency@Freeverb@@QEAAXM@Z ; Freeverb::setReverbDampingFrequency

; 280  :     float width = mapValueIntoRange(freeverb_spread, -1.0, 1.0);

	xor	edx, edx

; 175  :     freeverb_smearing = smearing * MAX_SMEARING_VALUE;

	mov	DWORD PTR [rbx+4], 1059967729		; 3f2dd2f1H

; 280  :     float width = mapValueIntoRange(freeverb_spread, -1.0, 1.0);

	mov	r8d, 192				; 000000c0H
$LL57@init:

; 177  :         apFiltersL_input[i].setFeedback(freeverb_smearing);

	mov	rcx, QWORD PTR [rbx+128]
	mov	eax, DWORD PTR [rbx+4]
	mov	DWORD PTR [rcx+rdx+56], eax

; 178  :         apFiltersR_input[i].setFeedback(freeverb_smearing);

	mov	rcx, QWORD PTR [rbx+136]
	mov	eax, DWORD PTR [rbx+4]
	mov	DWORD PTR [rdx+rcx+56], eax
	add	rdx, 64					; 00000040H
	cmp	rdx, r8
	jl	SHORT $LL57@init
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	xor	edx, edx
$LL60@init:
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 182  :         apFiltersL_output[i].setFeedback(freeverb_smearing);

	mov	rcx, QWORD PTR [rbx+144]
	mov	eax, DWORD PTR [rbx+4]
	mov	DWORD PTR [rdx+rcx+56], eax

; 183  :         apFiltersR_output[i].setFeedback(freeverb_smearing);

	mov	rcx, QWORD PTR [rbx+152]
	mov	eax, DWORD PTR [rbx+4]
	mov	DWORD PTR [rdx+rcx+56], eax
	add	rdx, 64					; 00000040H
	cmp	rdx, r8
	jl	SHORT $LL60@init

; 213  :     freeverb_spread = spread;

	movss	xmm2, DWORD PTR rspread$[rsp]

; 282  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	movaps	xmm1, xmm6

; 207  :     freeverb_preDelayMilliSeconds = predelay;

	and	DWORD PTR [rbx+16], 0

; 208  :     preDelayModule->setDelayInmsec(freeverb_preDelayMilliSeconds);

	mov	rcx, QWORD PTR [rbx+40]

; 213  :     freeverb_spread = spread;

	movss	DWORD PTR [rbx+20], xmm2
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h

; 23   :     return minvalue + value * (maxValue - minvalue);

	addss	xmm2, xmm2
	subss	xmm2, xmm6
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 281  :     wet1 = freeverb_wet * (width / 2.0 + 0.5);

	movaps	xmm0, xmm2

; 282  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	subss	xmm1, xmm2
	addss	xmm0, xmm6

; 283  :     dry = (1.0 - freeverb_wet);

	subss	xmm6, DWORD PTR [rbx]
	mulss	xmm1, DWORD PTR [rbx]
	mulss	xmm0, xmm7
	movss	DWORD PTR [rbx+32], xmm6
	mulss	xmm1, xmm7
	mulss	xmm0, DWORD PTR [rbx]
	movss	DWORD PTR [rbx+28], xmm1
	movss	DWORD PTR [rbx+24], xmm0
	movd	xmm0, DWORD PTR [rcx+16]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 128  : 	dly_delayInmsec = delayInmsec;

	and	DWORD PTR [rcx+24], 0

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN71@init

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN71@init:
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 139  : }

	movaps	xmm6, XMMWORD PTR [rsp+64]
	lea	r11, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rdi
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 134  : 	updateParameters();

	jmp	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
?init@Freeverb@@QEAAXHMMMMMM@Z ENDP			; Freeverb::init
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?setSampleRate@Freeverb@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 64
sampleRate$ = 72
?setSampleRate@Freeverb@@QEAAXH@Z PROC			; Freeverb::setSampleRate, COMDAT

; 145  : {

$LN25:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rbp
	mov	QWORD PTR [rax+24], rsi
	mov	QWORD PTR [rax+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	rbp, rcx
	mov	esi, edx

; 146  :     // Call setSampleRate methods on all needed delay lines
; 147  :     preDelayModule->setSampleRate(sampleRate);

	mov	rcx, QWORD PTR [rcx+40]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+8]
	xor	ebx, ebx
	mov	edi, ebx
	mov	r14d, ebx
	lea	r15d, QWORD PTR [rbx+8]
$LL4@setSampleR:

; 148  : 
; 149  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {
; 150  :         combFiltersL[i].setSampleRate(sampleRate);

	mov	rax, QWORD PTR [rbp+48]
	mov	edx, esi
	mov	r8, QWORD PTR [rdi+rax]
	lea	rcx, QWORD PTR [r14+rax]
	call	QWORD PTR [r8+8]

; 151  :         combFiltersR[i].setSampleRate(sampleRate);

	mov	rax, QWORD PTR [rbp+56]
	mov	edx, esi
	mov	r8, QWORD PTR [rdi+rax]
	lea	rcx, QWORD PTR [r14+rax]
	call	QWORD PTR [r8+8]
	lea	r14, QWORD PTR [r14+88]
	lea	rdi, QWORD PTR [rdi+88]
	sub	r15, 1
	jne	SHORT $LL4@setSampleR

; 152  :     }
; 153  : 
; 154  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {

	mov	r14d, 3
	mov	rdi, rbx
	mov	r12d, r14d
	mov	r15, rbx
$LL7@setSampleR:

; 155  :         apFiltersL_input[i].setSampleRate(sampleRate);

	mov	rax, QWORD PTR [rbp+128]
	mov	edx, esi
	mov	r8, QWORD PTR [rdi+rax]
	lea	rcx, QWORD PTR [r15+rax]
	call	QWORD PTR [r8+8]

; 156  :         apFiltersR_input[i].setSampleRate(sampleRate);

	mov	rax, QWORD PTR [rbp+136]
	mov	edx, esi
	mov	r8, QWORD PTR [rdi+rax]
	lea	rcx, QWORD PTR [r15+rax]
	call	QWORD PTR [r8+8]
	lea	r15, QWORD PTR [r15+64]
	lea	rdi, QWORD PTR [rdi+64]
	sub	r12, 1
	jne	SHORT $LL7@setSampleR

; 157  :     }
; 158  : 
; 159  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_OUT; i++) {

	mov	rdi, rbx
$LL10@setSampleR:

; 160  :         apFiltersL_output[i].setSampleRate(sampleRate);

	mov	rax, QWORD PTR [rbp+144]
	mov	edx, esi
	mov	r8, QWORD PTR [rbx+rax]
	lea	rcx, QWORD PTR [rdi+rax]
	call	QWORD PTR [r8+8]

; 161  :         apFiltersR_output[i].setSampleRate(sampleRate);

	mov	rax, QWORD PTR [rbp+152]
	mov	edx, esi
	mov	r8, QWORD PTR [rbx+rax]
	lea	rcx, QWORD PTR [rdi+rax]
	call	QWORD PTR [r8+8]
	lea	rdi, QWORD PTR [rdi+64]
	lea	rbx, QWORD PTR [rbx+64]
	sub	r14, 1
	jne	SHORT $LL10@setSampleR

; 162  :     }
; 163  : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
?setSampleRate@Freeverb@@QEAAXH@Z ENDP			; Freeverb::setSampleRate
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?setReverbWet@Freeverb@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 8
wet$dead$ = 16
?setReverbWet@Freeverb@@QEAAXM@Z PROC			; Freeverb::setReverbWet, COMDAT
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h

; 23   :     return minvalue + value * (maxValue - minvalue);

	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm3, DWORD PTR [rcx+20]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 283  :     dry = (1.0 - freeverb_wet);

	and	DWORD PTR [rcx+32], 0
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h

; 23   :     return minvalue + value * (maxValue - minvalue);

	addss	xmm3, xmm3
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 169  :     freeverb_wet = wet;

	mov	DWORD PTR [rcx], 1065353216		; 3f800000H
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h

; 23   :     return minvalue + value * (maxValue - minvalue);

	subss	xmm3, xmm2
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 281  :     wet1 = freeverb_wet * (width / 2.0 + 0.5);

	movaps	xmm0, xmm3
	addss	xmm0, xmm2

; 282  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	subss	xmm2, xmm3
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm2, DWORD PTR __real@3f000000
	movss	DWORD PTR [rcx+24], xmm0
	movss	DWORD PTR [rcx+28], xmm2

; 170  :     updateReverbParameters();
; 171  : }

	ret	0
?setReverbWet@Freeverb@@QEAAXM@Z ENDP			; Freeverb::setReverbWet
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?setReverbSmearing@Freeverb@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 8
smearing$dead$ = 16
?setReverbSmearing@Freeverb@@QEAAXM@Z PROC		; Freeverb::setReverbSmearing, COMDAT

; 175  :     freeverb_smearing = smearing * MAX_SMEARING_VALUE;

	xor	r9d, r9d
	mov	DWORD PTR [rcx+4], 1059967729		; 3f2dd2f1H
	mov	r10d, r9d
	mov	r8, rcx
	mov	r11d, 192				; 000000c0H
$LL4@setReverbS:

; 176  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {
; 177  :         apFiltersL_input[i].setFeedback(freeverb_smearing);

	mov	eax, DWORD PTR [r8+4]
	mov	rdx, QWORD PTR [r8+128]
	mov	DWORD PTR [r10+rdx+56], eax

; 178  :         apFiltersR_input[i].setFeedback(freeverb_smearing);

	mov	rcx, QWORD PTR [r8+136]
	mov	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [rcx+r10+56], eax
	add	r10, 64					; 00000040H
	cmp	r10, r11
	jl	SHORT $LL4@setReverbS
$LL7@setReverbS:

; 179  :     }
; 180  : 
; 181  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_OUT; i++) {
; 182  :         apFiltersL_output[i].setFeedback(freeverb_smearing);

	mov	rcx, QWORD PTR [r8+144]
	mov	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+rcx+56], eax

; 183  :         apFiltersR_output[i].setFeedback(freeverb_smearing);

	mov	rcx, QWORD PTR [r8+152]
	mov	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [rcx+r9+56], eax
	add	r9, 64					; 00000040H
	cmp	r9, r11
	jl	SHORT $LL7@setReverbS

; 184  :     }
; 185  : }

	ret	0
?setReverbSmearing@Freeverb@@QEAAXM@Z ENDP		; Freeverb::setReverbSmearing
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?setReverbDecayInSeconds@Freeverb@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 48
decay$ = 56
?setReverbDecayInSeconds@Freeverb@@QEAAXM@Z PROC	; Freeverb::setReverbDecayInSeconds, COMDAT

; 188  : {

$LN11:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 189  :     freeverb_decaySeconds = decay;

	xor	edi, edi
	movss	DWORD PTR [rcx+8], xmm1
	mov	rbx, rcx
	lea	esi, QWORD PTR [rdi+8]
$LL4@setReverbD:

; 190  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {
; 191  :         combFiltersL[i].setFeedbackFromDecay(freeverb_decaySeconds);

	mov	rcx, QWORD PTR [rbx+48]
	movss	xmm1, DWORD PTR [rbx+8]
	add	rcx, rdi
	call	?setFeedbackFromDecay@CombFilter@@QEAAXM@Z ; CombFilter::setFeedbackFromDecay

; 192  :         combFiltersR[i].setFeedbackFromDecay(freeverb_decaySeconds);

	mov	rcx, QWORD PTR [rbx+56]
	movss	xmm1, DWORD PTR [rbx+8]
	add	rcx, rdi
	call	?setFeedbackFromDecay@CombFilter@@QEAAXM@Z ; CombFilter::setFeedbackFromDecay
	add	rdi, 88					; 00000058H
	sub	rsi, 1
	jne	SHORT $LL4@setReverbD

; 193  :     }
; 194  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?setReverbDecayInSeconds@Freeverb@@QEAAXM@Z ENDP	; Freeverb::setReverbDecayInSeconds
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LPCombFilter.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LPFButterworth.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LPCombFilter.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LPFButterworth.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?setReverbDampingFrequency@Freeverb@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 48
damping$ = 56
?setReverbDampingFrequency@Freeverb@@QEAAXM@Z PROC	; Freeverb::setReverbDampingFrequency, COMDAT

; 197  : {

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 198  :     freeverb_dampingFrequency = damping;

	movss	DWORD PTR [rcx+12], xmm1
	mov	rdi, rcx
	xor	ebx, ebx
$LL4@setReverbD:

; 200  :         combFiltersL[i].setCutoffFrequency(freeverb_dampingFrequency);

	mov	rcx, QWORD PTR [rdi+48]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LPCombFilter.cpp

; 30   : 	lpcf_cutoffFreq = cutoffFreq;

	movss	xmm0, DWORD PTR [rdi+12]
	movss	DWORD PTR [rbx+rcx+80], xmm0

; 31   : 
; 32   : 	// set LPF cutoff frequency to the inserted value
; 33   : 	lpcf_feedbackLPF->setCutoffFrequency(lpcf_cutoffFreq);

	mov	rcx, QWORD PTR [rbx+rcx+72]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LPFButterworth.cpp

; 40   : 	lpf_cutoffFreq = cutoffFreq;

	movss	DWORD PTR [rcx+8], xmm0

; 41   : 
; 42   : 	// update lpf gains
; 43   : 	updateGains();

	call	?updateGains@LPFButterworth@@QEAAXXZ	; LPFButterworth::updateGains
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 201  :         combFiltersR[i].setCutoffFrequency(freeverb_dampingFrequency);

	mov	rcx, QWORD PTR [rdi+56]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LPCombFilter.cpp

; 30   : 	lpcf_cutoffFreq = cutoffFreq;

	movss	xmm0, DWORD PTR [rdi+12]
	movss	DWORD PTR [rbx+rcx+80], xmm0

; 31   : 
; 32   : 	// set LPF cutoff frequency to the inserted value
; 33   : 	lpcf_feedbackLPF->setCutoffFrequency(lpcf_cutoffFreq);

	mov	rcx, QWORD PTR [rbx+rcx+72]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\LPFButterworth.cpp

; 40   : 	lpf_cutoffFreq = cutoffFreq;

	movss	DWORD PTR [rcx+8], xmm0

; 41   : 
; 42   : 	// update lpf gains
; 43   : 	updateGains();

	call	?updateGains@LPFButterworth@@QEAAXXZ	; LPFButterworth::updateGains
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 199  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	add	rbx, 88					; 00000058H
	cmp	rbx, 704				; 000002c0H
	jl	SHORT $LL4@setReverbD

; 202  :     }
; 203  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?setReverbDampingFrequency@Freeverb@@QEAAXM@Z ENDP	; Freeverb::setReverbDampingFrequency
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?setReverbPreDelayInMilliseconds@Freeverb@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 8
predelay$dead$ = 16
?setReverbPreDelayInMilliseconds@Freeverb@@QEAAXM@Z PROC ; Freeverb::setReverbPreDelayInMilliseconds, COMDAT

; 207  :     freeverb_preDelayMilliSeconds = predelay;

	and	DWORD PTR [rcx+16], 0

; 208  :     preDelayModule->setDelayInmsec(freeverb_preDelayMilliSeconds);

	mov	rcx, QWORD PTR [rcx+40]
	movd	xmm0, DWORD PTR [rcx+16]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 128  : 	dly_delayInmsec = delayInmsec;

	and	DWORD PTR [rcx+24], 0

; 129  : 
; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN4@setReverbP

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN4@setReverbP:

; 132  : 
; 133  : 	// Update parameters based on new delay length
; 134  : 	updateParameters();

	jmp	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
?setReverbPreDelayInMilliseconds@Freeverb@@QEAAXM@Z ENDP ; Freeverb::setReverbPreDelayInMilliseconds
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?setReverbSpread@Freeverb@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 8
spread$ = 16
?setReverbSpread@Freeverb@@QEAAXM@Z PROC		; Freeverb::setReverbSpread, COMDAT
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h

; 23   :     return minvalue + value * (maxValue - minvalue);

	movss	xmm3, DWORD PTR __real@3f800000
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 213  :     freeverb_spread = spread;

	movss	DWORD PTR [rcx+20], xmm1
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h

; 23   :     return minvalue + value * (maxValue - minvalue);

	addss	xmm1, xmm1
	subss	xmm1, xmm3
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 281  :     wet1 = freeverb_wet * (width / 2.0 + 0.5);

	movaps	xmm0, xmm1
	addss	xmm0, xmm3
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rcx+24], xmm0

; 282  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	movaps	xmm0, xmm3

; 283  :     dry = (1.0 - freeverb_wet);

	subss	xmm3, DWORD PTR [rcx]
	subss	xmm0, xmm1
	movss	DWORD PTR [rcx+32], xmm3
	mulss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [rcx+28], xmm0

; 214  :     updateReverbParameters();
; 215  : }

	ret	0
?setReverbSpread@Freeverb@@QEAAXM@Z ENDP		; Freeverb::setReverbSpread
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?setCombFiltersDelay@Freeverb@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?setCombFiltersDelay@Freeverb@@QEAAXXZ PROC		; Freeverb::setCombFiltersDelay, COMDAT

; 248  : {    

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 250  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	xor	edi, edi
	lea	rbx, QWORD PTR [rcx+64]
	mov	rsi, rcx
	lea	ebp, QWORD PTR [rdi+8]
$LL4@setCombFil:

; 251  :         combFilterDlymsRight[i] = combFilterDlymsLeft[i] + STEREO_SPREAD_COEFFICIENT_IN_MS;

	movss	xmm1, DWORD PTR [rbx+32]

; 252  :         combFiltersL[i].setDelayInmsec(combFilterDlymsLeft[i]);

	mov	rcx, QWORD PTR [rsi+48]
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f800000
	add	rcx, rdi
	movss	DWORD PTR [rbx], xmm0
	movd	xmm0, DWORD PTR [rcx+16]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+24], xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN15@setCombFil

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN15@setCombFil:

; 132  : 
; 133  : 	// Update parameters based on new delay length
; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 253  :         combFiltersR[i].setDelayInmsec(combFilterDlymsRight[i]);

	mov	rcx, QWORD PTR [rsi+56]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 128  : 	dly_delayInmsec = delayInmsec;

	movss	xmm0, DWORD PTR [rbx]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 253  :         combFiltersR[i].setDelayInmsec(combFilterDlymsRight[i]);

	add	rcx, rdi
	movd	xmm1, DWORD PTR [rcx+16]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+24], xmm0
	comiss	xmm0, xmm1
	jbe	SHORT $LN16@setCombFil

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm1
$LN16@setCombFil:

; 132  : 
; 133  : 	// Update parameters based on new delay length
; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 250  :     for (int i = 0; i < NUM_COMB_FILTERS; i++) {

	add	rbx, 4
	add	rdi, 88					; 00000058H
	sub	rbp, 1
	jne	SHORT $LL4@setCombFil

; 254  :     }
; 255  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?setCombFiltersDelay@Freeverb@@QEAAXXZ ENDP		; Freeverb::setCombFiltersDelay
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?setAllPassFiltersDelay@Freeverb@@QEAAXXZ
_TEXT	SEGMENT
this$ = 64
?setAllPassFiltersDelay@Freeverb@@QEAAXXZ PROC		; Freeverb::setAllPassFiltersDelay, COMDAT

; 261  : {

$LN34:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 263  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {

	xor	esi, esi
	lea	rbx, QWORD PTR [rcx+160]
	mov	rdi, rcx
	mov	r14d, esi
	lea	ebp, QWORD PTR [rsi+3]
	mov	r15d, ebp
$LL4@setAllPass:

; 264  :         allPassDlymsRight_input[i] = allPassDlymsLeft_input[i] + STEREO_SPREAD_COEFFICIENT_IN_MS;

	movss	xmm1, DWORD PTR [rbx+12]

; 265  :         apFiltersL_input[i].setDelayInmsec(allPassDlymsLeft_input[i]);

	mov	rcx, QWORD PTR [rdi+128]
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f800000
	add	rcx, r14
	movss	DWORD PTR [rbx], xmm0
	movd	xmm0, DWORD PTR [rcx+16]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+24], xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN27@setAllPass

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN27@setAllPass:

; 132  : 
; 133  : 	// Update parameters based on new delay length
; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 266  :         apFiltersR_input[i].setDelayInmsec(allPassDlymsRight_input[i]);

	mov	rcx, QWORD PTR [rdi+136]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 128  : 	dly_delayInmsec = delayInmsec;

	movss	xmm0, DWORD PTR [rbx]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 266  :         apFiltersR_input[i].setDelayInmsec(allPassDlymsRight_input[i]);

	add	rcx, r14
	movd	xmm1, DWORD PTR [rcx+16]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+24], xmm0
	comiss	xmm0, xmm1
	jbe	SHORT $LN28@setAllPass

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm1
$LN28@setAllPass:

; 132  : 
; 133  : 	// Update parameters based on new delay length
; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 263  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_IN; i++) {

	add	rbx, 4
	add	r14, 64					; 00000040H
	sub	r15, 1
	jne	SHORT $LL4@setAllPass
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	lea	rbx, QWORD PTR [rdi+184]
$LL7@setAllPass:
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 270  :         allPassDlymsRight_output[i] = allPassDlymsLeft_output[i] + STEREO_SPREAD_COEFFICIENT_IN_MS;

	movss	xmm1, DWORD PTR [rbx+12]

; 271  :         apFiltersL_output[i].setDelayInmsec(allPassDlymsLeft_output[i]);

	mov	rcx, QWORD PTR [rdi+144]
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f800000
	add	rcx, rsi
	movss	DWORD PTR [rbx], xmm0
	movd	xmm0, DWORD PTR [rcx+16]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rcx+24], xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN29@setAllPass

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm0
$LN29@setAllPass:

; 132  : 
; 133  : 	// Update parameters based on new delay length
; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 272  :         apFiltersR_output[i].setDelayInmsec(allPassDlymsRight_output[i]);

	mov	rcx, QWORD PTR [rdi+152]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 128  : 	dly_delayInmsec = delayInmsec;

	movss	xmm0, DWORD PTR [rbx]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 272  :         apFiltersR_output[i].setDelayInmsec(allPassDlymsRight_output[i]);

	add	rcx, rsi
	movd	xmm1, DWORD PTR [rcx+16]
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Delay.cpp

; 130  : 	if (dly_delayInmsec > dly_lineLengthInmsec)

	cvtdq2ps xmm1, xmm1
	movss	DWORD PTR [rcx+24], xmm0
	comiss	xmm0, xmm1
	jbe	SHORT $LN30@setAllPass

; 131  : 		dly_delayInmsec = dly_lineLengthInmsec;

	movss	DWORD PTR [rcx+24], xmm1
$LN30@setAllPass:

; 132  : 
; 133  : 	// Update parameters based on new delay length
; 134  : 	updateParameters();

	call	?updateParameters@Delay@@QEAAXXZ	; Delay::updateParameters
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 269  :     for (int i = 0; i < NUM_ALLPASS_FILTERS_OUT; i++) {

	add	rbx, 4
	add	rsi, 64					; 00000040H
	sub	rbp, 1
	jne	SHORT $LL7@setAllPass

; 273  :     }
; 274  : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
?setAllPassFiltersDelay@Freeverb@@QEAAXXZ ENDP		; Freeverb::setAllPassFiltersDelay
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?updateReverbParameters@Freeverb@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?updateReverbParameters@Freeverb@@QEAAXXZ PROC		; Freeverb::updateReverbParameters, COMDAT
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\include\utils.h

; 23   :     return minvalue + value * (maxValue - minvalue);

	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR [rcx+20]
	addss	xmm2, xmm2
	subss	xmm2, xmm3
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp

; 281  :     wet1 = freeverb_wet * (width / 2.0 + 0.5);

	movaps	xmm0, xmm2
	addss	xmm0, xmm3
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rcx+24], xmm0

; 282  :     wet2 = freeverb_wet * (1 - width) / 2.0;

	movaps	xmm0, xmm3

; 283  :     dry = (1.0 - freeverb_wet);

	subss	xmm3, DWORD PTR [rcx]
	subss	xmm0, xmm2
	movss	DWORD PTR [rcx+32], xmm3
	mulss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [rcx+28], xmm0

; 284  : }

	ret	0
?updateReverbParameters@Freeverb@@QEAAXXZ ENDP		; Freeverb::updateReverbParameters
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\RenatoVolpe\personal\fox-suite-blocks\src\Freeverb.cpp
;	COMDAT ?processAudio@Freeverb@@QEAAXPEAM0@Z
_TEXT	SEGMENT
this$ = 160
in$ = 168
out$ = 176
?processAudio@Freeverb@@QEAAXPEAM0@Z PROC		; Freeverb::processAudio, COMDAT

; 291  : {

$LN25:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rbp
	mov	QWORD PTR [rax+24], rsi
	mov	QWORD PTR [rax+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 128				; 00000080H
	movaps	XMMWORD PTR [rax-40], xmm6
	mov	rbx, rcx

; 292  :     float inL = in[0];
; 293  :     float inR = in[1];
; 294  : 
; 295  :     // Init output values
; 296  :     float outputL = 0;
; 297  :     float outputR = 0;
; 298  : 
; 299  :     // Init input values
; 300  :     float inputL = 0;
; 301  :     float inputR = 0;
; 302  : 
; 303  :     // Pre-delay processing 
; 304  :     inputL = preDelayModule->processAudio(inL);

	mov	rcx, QWORD PTR [rcx+40]
	mov	r15, r8
	movaps	XMMWORD PTR [rax-56], xmm7
	xorps	xmm6, xmm6
	movaps	XMMWORD PTR [rax-72], xmm8
	xorps	xmm7, xmm7
	movaps	XMMWORD PTR [rax-88], xmm9
	movaps	XMMWORD PTR [rax-104], xmm10
	movss	xmm10, DWORD PTR [rdx]
	movaps	XMMWORD PTR [rax-120], xmm11
	movaps	xmm1, xmm10
	mov	rax, QWORD PTR [rcx]
	movss	xmm11, DWORD PTR [rdx+4]
	call	QWORD PTR [rax+16]

; 305  :     inputR = preDelayModule->processAudio(inR);

	mov	rcx, QWORD PTR [rbx+40]
	movaps	xmm1, xmm11
	movaps	xmm8, xmm0
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	xor	edi, edi
	movaps	xmm9, xmm0
	mov	esi, edi
	mov	r14d, edi
	lea	r12d, QWORD PTR [rdi+3]
	mov	ebp, r12d
$LL4@processAud:

; 306  : 
; 307  :     // Input AllPass Filters series processing
; 308  :     for (int j = 0; j < NUM_ALLPASS_FILTERS_IN; j++) {
; 309  :         inputL = apFiltersL_input[j].processAudio(inputL);

	mov	rax, QWORD PTR [rbx+128]
	movaps	xmm1, xmm8
	mov	rdx, QWORD PTR [rsi+rax]
	lea	rcx, QWORD PTR [r14+rax]
	call	QWORD PTR [rdx+16]

; 310  :         inputR = apFiltersR_input[j].processAudio(inputR);

	mov	rax, QWORD PTR [rbx+136]
	movaps	xmm1, xmm9
	movaps	xmm8, xmm0
	mov	rdx, QWORD PTR [rsi+rax]
	lea	rcx, QWORD PTR [r14+rax]
	call	QWORD PTR [rdx+16]
	lea	r14, QWORD PTR [r14+64]
	movaps	xmm9, xmm0
	lea	rsi, QWORD PTR [rsi+64]
	sub	rbp, 1
	jne	SHORT $LL4@processAud

; 311  :     }
; 312  : 
; 313  :     // Comb Filters parallel processing
; 314  :     for (int j = 0; j < NUM_COMB_FILTERS; j++) {

	mov	rsi, rdi
	mov	r14, rdi
	mov	ebp, 8
$LL7@processAud:

; 315  :         outputL += combFiltersL[j].processAudio(inputL);

	mov	rax, QWORD PTR [rbx+48]
	movaps	xmm1, xmm8
	mov	rdx, QWORD PTR [rsi+rax]
	lea	rcx, QWORD PTR [r14+rax]
	call	QWORD PTR [rdx+16]

; 316  :         outputR += combFiltersR[j].processAudio(inputR);

	mov	rax, QWORD PTR [rbx+56]
	movaps	xmm1, xmm9
	addss	xmm6, xmm0
	mov	rdx, QWORD PTR [rsi+rax]
	lea	rcx, QWORD PTR [r14+rax]
	call	QWORD PTR [rdx+16]
	add	r14, 88					; 00000058H
	add	rsi, 88					; 00000058H
	addss	xmm7, xmm0
	sub	rbp, 1
	jne	SHORT $LL7@processAud

; 317  :     }
; 318  : 
; 319  :     // Output AllPass Filters series processing
; 320  :     for (int j = 0; j < NUM_ALLPASS_FILTERS_OUT; j++) {

	mov	rsi, rdi
$LL10@processAud:

; 321  :         outputL = apFiltersL_output[j].processAudio(outputL);

	mov	rax, QWORD PTR [rbx+144]
	movaps	xmm1, xmm6
	mov	rdx, QWORD PTR [rdi+rax]
	lea	rcx, QWORD PTR [rsi+rax]
	call	QWORD PTR [rdx+16]

; 322  :         outputR = apFiltersR_output[j].processAudio(outputR);

	mov	rax, QWORD PTR [rbx+152]
	movaps	xmm1, xmm7
	movaps	xmm6, xmm0
	mov	rdx, QWORD PTR [rdi+rax]
	lea	rcx, QWORD PTR [rsi+rax]
	call	QWORD PTR [rdx+16]
	lea	rsi, QWORD PTR [rsi+64]
	movaps	xmm7, xmm0
	lea	rdi, QWORD PTR [rdi+64]
	sub	r12, 1
	jne	SHORT $LL10@processAud

; 323  :     }    
; 324  : 
; 325  :     // Stereo spread processing + output allocation
; 326  :     out[0] = wet1 * outputL + wet2 * outputR + dry * inL;

	movss	xmm3, DWORD PTR [rbx+28]

; 327  :     out[1] = wet1 * outputR + wet2 * outputL + dry * inR;
; 328  : }

	lea	r11, QWORD PTR [rsp+128]
	movss	xmm5, DWORD PTR [rbx+24]
	movaps	xmm0, xmm3
	movss	xmm4, DWORD PTR [rbx+32]
	movaps	xmm2, xmm5
	mov	rbx, QWORD PTR [r11+32]
	movaps	xmm1, xmm4
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	mov	rdi, QWORD PTR [r11+56]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	mulss	xmm2, xmm6
	mulss	xmm5, xmm7
	mulss	xmm0, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+96]
	mulss	xmm3, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+112]
	addss	xmm2, xmm0
	mulss	xmm1, xmm10
	movaps	xmm10, XMMWORD PTR [r11-80]
	addss	xmm5, xmm3
	mulss	xmm4, xmm11
	movaps	xmm11, XMMWORD PTR [r11-96]
	addss	xmm2, xmm1
	addss	xmm5, xmm4
	movss	DWORD PTR [r15], xmm2
	movss	DWORD PTR [r15+4], xmm5
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r12
	ret	0
?processAudio@Freeverb@@QEAAXPEAM0@Z ENDP		; Freeverb::processAudio
_TEXT	ENDS
END
