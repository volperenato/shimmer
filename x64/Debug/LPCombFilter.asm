; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_R0?AVLPCombFilter@@@8			; LPCombFilter `RTTI Type Descriptor'
PUBLIC	??_R3LPCombFilter@@8				; LPCombFilter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4LPCombFilter@@6B@				; LPCombFilter::`RTTI Complete Object Locator'
PUBLIC	??_R2LPCombFilter@@8				; LPCombFilter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@LPCombFilter@@8			; LPCombFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7LPCombFilter@@6B@				; LPCombFilter::`vftable'
EXTRN	__imp_cosh:PROC
EXTRN	__imp_sqrt:PROC
EXTRN	__imp_exp:PROC
EXTRN	__imp_tan:PROC
EXTRN	__imp_cos:PROC
EXTRN	__imp_sin:PROC
;	COMDAT ??_7LPCombFilter@@6B@
CONST	SEGMENT
??_7LPCombFilter@@6B@ DQ FLAT:??_R4LPCombFilter@@6B@	; LPCombFilter::`vftable'
	DQ	FLAT:?init@LPCombFilter@@UEAAXMH@Z
	DQ	FLAT:?setSampleRate@Delay@@UEAAXH@Z
	DQ	FLAT:?processAudio@LPCombFilter@@UEAAMM@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@LPCombFilter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@LPCombFilter@@8 DD imagerel ??_R0?AVLPCombFilter@@@8 ; LPCombFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3LPCombFilter@@8
rdata$r	ENDS
;	COMDAT ??_R2LPCombFilter@@8
rdata$r	SEGMENT
??_R2LPCombFilter@@8 DD imagerel ??_R1A@?0A@EA@LPCombFilter@@8 ; LPCombFilter::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@CombFilter@@8
	DD	imagerel ??_R1A@?0A@EA@Delay@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R4LPCombFilter@@6B@
rdata$r	SEGMENT
??_R4LPCombFilter@@6B@ DD 01H				; LPCombFilter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVLPCombFilter@@@8
	DD	imagerel ??_R3LPCombFilter@@8
	DD	imagerel ??_R4LPCombFilter@@6B@
rdata$r	ENDS
;	COMDAT ??_R3LPCombFilter@@8
rdata$r	SEGMENT
??_R3LPCombFilter@@8 DD 00H				; LPCombFilter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2LPCombFilter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVLPCombFilter@@@8
data$rs	SEGMENT
??_R0?AVLPCombFilter@@@8 DQ FLAT:??_7type_info@@6B@	; LPCombFilter `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVLPCombFilter@@', 00H
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
PUBLIC	?processAudio@LPCombFilter@@UEAAMM@Z		; LPCombFilter::processAudio
PUBLIC	?processLowPass@LPCombFilter@@QEAAMM@Z		; LPCombFilter::processLowPass
PUBLIC	?setFilterType@LPCombFilter@@QEAAXW4LPFilterType@@@Z ; LPCombFilter::setFilterType
PUBLIC	?setCutoffFrequency@LPCombFilter@@QEAAXM@Z	; LPCombFilter::setCutoffFrequency
PUBLIC	?init@LPCombFilter@@UEAAXMH@Z			; LPCombFilter::init
PUBLIC	??_GLowPassFilter@@QEAAPEAXI@Z			; LowPassFilter::`scalar deleting destructor'
PUBLIC	??1LPCombFilter@@QEAA@XZ			; LPCombFilter::~LPCombFilter
PUBLIC	??0LPCombFilter@@QEAA@XZ			; LPCombFilter::LPCombFilter
PUBLIC	?processAudio@LowPassFilter@@QEAAMM@Z		; LowPassFilter::processAudio
PUBLIC	?updateBuffers@LowPassFilter@@QEAAXMM@Z		; LowPassFilter::updateBuffers
PUBLIC	?updateGains@LowPassFilter@@QEAAXXZ		; LowPassFilter::updateGains
PUBLIC	?setFilterType@LowPassFilter@@QEAAXW4LPFilterType@@@Z ; LowPassFilter::setFilterType
PUBLIC	?setCutoffFrequency@LowPassFilter@@QEAAXM@Z	; LowPassFilter::setCutoffFrequency
PUBLIC	?init@LowPassFilter@@QEAAXH@Z			; LowPassFilter::init
PUBLIC	??1LowPassFilter@@QEAA@XZ			; LowPassFilter::~LowPassFilter
PUBLIC	??0LowPassFilter@@QEAA@HMW4LPFilterType@@@Z	; LowPassFilter::LowPassFilter
;	COMDAT pdata
pdata	SEGMENT
$pdata$?processAudio@LPCombFilter@@UEAAMM@Z DD imagerel $LN17
	DD	imagerel $LN17+211
	DD	imagerel $unwind$?processAudio@LPCombFilter@@UEAAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?processLowPass@LPCombFilter@@QEAAMM@Z DD imagerel $LN8
	DD	imagerel $LN8+122
	DD	imagerel $unwind$?processLowPass@LPCombFilter@@QEAAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?init@LPCombFilter@@UEAAXMH@Z DD imagerel $LN8
	DD	imagerel $LN8+58
	DD	imagerel $unwind$?init@LPCombFilter@@UEAAXMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GLowPassFilter@@QEAAPEAXI@Z DD imagerel $LN6
	DD	imagerel $LN6+28
	DD	imagerel $unwind$??_GLowPassFilter@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1LPCombFilter@@QEAA@XZ DD imagerel $LN13
	DD	imagerel $LN13+61
	DD	imagerel $unwind$??1LPCombFilter@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0LPCombFilter@@QEAA@XZ DD imagerel $LN21
	DD	imagerel $LN21+172
	DD	imagerel $unwind$??0LPCombFilter@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?processAudio@LowPassFilter@@QEAAMM@Z DD imagerel $LN6
	DD	imagerel $LN6+118
	DD	imagerel $unwind$?processAudio@LowPassFilter@@QEAAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?updateGains@LowPassFilter@@QEAAXXZ DD imagerel $LN22
	DD	imagerel $LN22+1766
	DD	imagerel $unwind$?updateGains@LowPassFilter@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0LowPassFilter@@QEAA@HMW4LPFilterType@@@Z DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??0LowPassFilter@@QEAA@HMW4LPFilterType@@@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0LowPassFilter@@QEAA@HMW4LPFilterType@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?updateGains@LowPassFilter@@QEAAXXZ DD 0113101H
	DD	02c831H
	DD	03b82cH
	DD	04a827H
	DD	059822H
	DD	06881dH
	DD	077818H
	DD	08680fH
	DD	012010bH
	DD	03004H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?processAudio@LowPassFilter@@QEAAMM@Z DD 032e01H
	DD	0682eH
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0LPCombFilter@@QEAA@XZ DB 02H
	DB	0b4H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0LPCombFilter@@QEAA@XZ DB 02H
	DB	0cH
	DD	imagerel ??1CombFilter@@QEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0LPCombFilter@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0LPCombFilter@@QEAA@XZ
	DD	imagerel $ip2state$??0LPCombFilter@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0LPCombFilter@@QEAA@XZ DD 061411H
	DD	085414H
	DD	073414H
	DD	070103214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0LPCombFilter@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1LPCombFilter@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GLowPassFilter@@QEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?init@LPCombFilter@@UEAAXMH@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?processLowPass@LPCombFilter@@QEAAMM@Z DD 030f01H
	DD	0680fH
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?processAudio@LPCombFilter@@UEAAMM@Z DD 051101H
	DD	027811H
	DD	036809H
	DD	08204H
?MAX_LPF_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMAX_LPF_FREQUENCY_LOG@@YAXXZ ; MAX_LPF_FREQUENCY_LOG$initializer$
?MIN_LPF_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMIN_LPF_FREQUENCY_LOG@@YAXXZ ; MIN_LPF_FREQUENCY_LOG$initializer$
?MAX_HPF_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMAX_HPF_FREQUENCY_LOG@@YAXXZ ; MAX_HPF_FREQUENCY_LOG$initializer$
?MIN_HPF_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMIN_HPF_FREQUENCY_LOG@@YAXXZ ; MIN_HPF_FREQUENCY_LOG$initializer$
?MAX_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMAX_FREQUENCY_LOG@@YAXXZ ; MAX_FREQUENCY_LOG$initializer$
?MIN_FREQUENCY_LOG$initializer$@@3P6AXXZEA DQ FLAT:??__EMIN_FREQUENCY_LOG@@YAXXZ ; MIN_FREQUENCY_LOG$initializer$
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\constants.h
;	COMDAT ??__EMAX_LPF_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMAX_LPF_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MAX_LPF_FREQUENCY_LOG'', COMDAT

; 15   : const float MAX_LPF_FREQUENCY_LOG = log(MAX_LPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@40d3880000000000
	rex_jmp	QWORD PTR __imp_log
??__EMAX_LPF_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MAX_LPF_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\constants.h
;	COMDAT ??__EMIN_LPF_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMIN_LPF_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MIN_LPF_FREQUENCY_LOG'', COMDAT

; 16   : const float MIN_LPF_FREQUENCY_LOG = log(MIN_LPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@4034000000000000
	rex_jmp	QWORD PTR __imp_log
??__EMIN_LPF_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MIN_LPF_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\constants.h
;	COMDAT ??__EMAX_HPF_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMAX_HPF_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MAX_HPF_FREQUENCY_LOG'', COMDAT

; 17   : const float MAX_HPF_FREQUENCY_LOG = log(MAX_HPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@40d09a0000000000
	rex_jmp	QWORD PTR __imp_log
??__EMAX_HPF_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MAX_HPF_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\constants.h
;	COMDAT ??__EMIN_HPF_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMIN_HPF_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MIN_HPF_FREQUENCY_LOG'', COMDAT

; 18   : const float MIN_HPF_FREQUENCY_LOG = log(MIN_HPF_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@4034000000000000
	rex_jmp	QWORD PTR __imp_log
??__EMIN_HPF_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MIN_HPF_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\constants.h
;	COMDAT ??__EMAX_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMAX_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MAX_FREQUENCY_LOG'', COMDAT

; 19   : const float MAX_FREQUENCY_LOG = log(MAX_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@40d3880000000000
	rex_jmp	QWORD PTR __imp_log
??__EMAX_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MAX_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\constants.h
;	COMDAT ??__EMIN_FREQUENCY_LOG@@YAXXZ
text$di	SEGMENT
??__EMIN_FREQUENCY_LOG@@YAXXZ PROC			; `dynamic initializer for 'MIN_FREQUENCY_LOG'', COMDAT

; 20   : const float MIN_FREQUENCY_LOG = log(MIN_FREQUENCY);

	movsd	xmm0, QWORD PTR __real@4024000000000000
	rex_jmp	QWORD PTR __imp_log
??__EMIN_FREQUENCY_LOG@@YAXXZ ENDP			; `dynamic initializer for 'MIN_FREQUENCY_LOG''
text$di	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\LowPassFilter.h
;	COMDAT ??0LowPassFilter@@QEAA@HMW4LPFilterType@@@Z
_TEXT	SEGMENT
this$ = 48
sampleRate$dead$ = 56
freq$dead$ = 64
type$dead$ = 72
??0LowPassFilter@@QEAA@HMW4LPFilterType@@@Z PROC	; LowPassFilter::LowPassFilter, COMDAT

; 38   : 	LowPassFilter(int sampleRate = _TEMPLATE_SAMPLERATE, float freq = MAX_LPF_FREQUENCY, LPFilterType type = DEFAULT_LOW_PASS_FILTER_TYPE) {

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 39   : 			lpf_cutoffFreq = freq;
; 40   : 			lpf_sampleRate = sampleRate;
; 41   : 			lpf_type = type;

	xor	eax, eax
	mov	DWORD PTR [rcx+4], 1184645120		; 469c4000H
	mov	DWORD PTR [rcx], eax
	mov	rbx, rcx

; 42   : 			lpf_shelvingGaindB = DEFAULT_SHELVING_GAIN;
; 43   : 			lpf_Q = DEFAULT_RESONANCE;
; 44   : 			lpf_xn_1 = 0.0;

	mov	QWORD PTR [rcx+44], rax

; 45   : 			lpf_xn_2 = 0.0;
; 46   : 			lpf_yn_1 = 0.0;

	mov	QWORD PTR [rcx+52], rax
	mov	DWORD PTR [rcx+8], 44100		; 0000ac44H
	mov	DWORD PTR [rcx+12], -1061158912		; c0c00000H
	mov	DWORD PTR [rcx+16], 1060437492		; 3f34fdf4H

; 47   : 			lpf_yn_2 = 0.0;
; 48   : 			updateGains();

	call	?updateGains@LowPassFilter@@QEAAXXZ	; LowPassFilter::updateGains

; 49   : 	}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0LowPassFilter@@QEAA@HMW4LPFilterType@@@Z ENDP	; LowPassFilter::LowPassFilter
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\LowPassFilter.h
;	COMDAT ??1LowPassFilter@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1LowPassFilter@@QEAA@XZ PROC				; LowPassFilter::~LowPassFilter, COMDAT

; 51   : 	~LowPassFilter() {}

	ret	0
??1LowPassFilter@@QEAA@XZ ENDP				; LowPassFilter::~LowPassFilter
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\LowPassFilter.h
;	COMDAT ?init@LowPassFilter@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 8
sampleRate$ = 16
?init@LowPassFilter@@QEAAXH@Z PROC			; LowPassFilter::init, COMDAT

; 54   : 		// set internal sample rate
; 55   : 		lpf_sampleRate = sampleRate;

	mov	DWORD PTR [rcx+8], edx

; 56   : 	}

	ret	0
?init@LowPassFilter@@QEAAXH@Z ENDP			; LowPassFilter::init
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\LowPassFilter.h
;	COMDAT ?setCutoffFrequency@LowPassFilter@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 8
cutoffFreq$ = 16
?setCutoffFrequency@LowPassFilter@@QEAAXM@Z PROC	; LowPassFilter::setCutoffFrequency, COMDAT

; 67   : 		// allocate cutoff frequency value
; 68   : 		lpf_cutoffFreq = cutoffFreq;

	movss	DWORD PTR [rcx+4], xmm1

; 69   : 
; 70   : 		// update lpf gains
; 71   : 		updateGains();

	jmp	?updateGains@LowPassFilter@@QEAAXXZ	; LowPassFilter::updateGains
?setCutoffFrequency@LowPassFilter@@QEAAXM@Z ENDP	; LowPassFilter::setCutoffFrequency
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\LowPassFilter.h
;	COMDAT ?setFilterType@LowPassFilter@@QEAAXW4LPFilterType@@@Z
_TEXT	SEGMENT
this$ = 8
type$ = 16
?setFilterType@LowPassFilter@@QEAAXW4LPFilterType@@@Z PROC ; LowPassFilter::setFilterType, COMDAT

; 75   : 		// allocate filter type
; 76   : 		lpf_type = type;

	mov	DWORD PTR [rcx], edx

; 77   : 
; 78   : 		// update lpf gains
; 79   : 		updateGains();

	jmp	?updateGains@LowPassFilter@@QEAAXXZ	; LowPassFilter::updateGains
?setFilterType@LowPassFilter@@QEAAXW4LPFilterType@@@Z ENDP ; LowPassFilter::setFilterType
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\LowPassFilter.h
;	COMDAT ?updateGains@LowPassFilter@@QEAAXXZ
_TEXT	SEGMENT
this$ = 160
?updateGains@LowPassFilter@@QEAAXXZ PROC		; LowPassFilter::updateGains, COMDAT

; 92   : 	void updateGains() {

$LN22:
	mov	rax, rsp
	push	rbx
	sub	rsp, 144				; 00000090H
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rbx, rcx

; 93   : 		switch (lpf_type) {

	mov	ecx, DWORD PTR [rcx]
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	test	ecx, ecx
	je	$LN4@updateGain
	sub	ecx, 1
	je	$LN5@updateGain
	sub	ecx, 1
	je	$LN6@updateGain
	sub	ecx, 1
	je	$LN7@updateGain
	sub	ecx, 1
	je	$LN8@updateGain
	sub	ecx, 1
	je	$LN9@updateGain
	cmp	ecx, 1
	jne	$LN2@updateGain

; 170  : 		}
; 171  : 		case LPFilterType::Vicanek: {
; 172  : 			float omegac = 2.0 * M_PI * lpf_cutoffFreq / (float)lpf_sampleRate;

	movss	xmm2, DWORD PTR [rbx+4]
	xorps	xmm0, xmm0
	cvtsi2ss xmm0, DWORD PTR [rbx+8]

; 173  : 			float f0 = omegac / M_PI;
; 174  : 			float q = 1.0 / (2.0 * lpf_Q);

	movss	xmm11, DWORD PTR __real@3f000000
	xorps	xmm10, xmm10

; 175  : 			if (q <= 1.0)

	movss	xmm8, DWORD PTR __real@3f800000
	movaps	xmm7, xmm11
	divss	xmm7, DWORD PTR [rbx+16]
	cvtps2pd xmm1, xmm0
	comiss	xmm7, xmm8
	cvtps2pd xmm2, xmm2
	mulsd	xmm2, QWORD PTR __real@401921fb54442d18
	divsd	xmm2, xmm1
	cvtpd2ps xmm9, xmm2
	movaps	xmm2, xmm7
	cvtps2pd xmm6, xmm9
	mulss	xmm2, xmm7
	movaps	xmm0, xmm6
	mulsd	xmm0, QWORD PTR __real@3fd45f306dc9c883
	cvtpd2ps xmm12, xmm0
	movaps	xmm0, xmm7
	mulss	xmm0, xmm9
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm10, xmm0
	ja	SHORT $LN13@updateGain

; 176  : 				lpf_b1 = -2.0 * exp(-q * omegac) * cos(sqrt(1.0 - q * q) * omegac);

	movaps	xmm1, xmm8
	subss	xmm1, xmm2
	cvtps2pd xmm0, xmm1
	call	QWORD PTR __imp_sqrt
	mulsd	xmm0, xmm6
	call	QWORD PTR __imp_cos
	jmp	SHORT $LN16@updateGain
$LN13@updateGain:

; 177  : 			else
; 178  : 				lpf_b1 = -2.0 * exp(-q * omegac) * cosh(sqrt(q * q - 1.0) * omegac);

	subss	xmm2, xmm8
	cvtps2pd xmm0, xmm2
	call	QWORD PTR __imp_sqrt
	mulsd	xmm0, xmm6
	call	QWORD PTR __imp_cosh
$LN16@updateGain:

; 179  : 			lpf_b2 = exp(-2.0 * q * omegac);

	movaps	xmm6, xmm0
	movaps	xmm0, xmm10
	call	QWORD PTR __imp_exp
	mulsd	xmm0, QWORD PTR __real@c000000000000000
	mulsd	xmm0, xmm6
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR [rbx+32], xmm0
	mulss	xmm7, DWORD PTR __real@c0000000
	mulss	xmm7, xmm9
	cvtps2pd xmm0, xmm7
	call	QWORD PTR __imp_exp

; 180  : 			float r1 = ((1.0 - lpf_b1 + lpf_b2) * f0 * f0) / sqrt((1.0 - f0 * f0) * (1.0 - f0 * f0) + f0 * f0 / (lpf_Q * lpf_Q));

	movaps	xmm2, xmm12
	movaps	xmm1, xmm8
	mulss	xmm2, xmm12
	xorps	xmm6, xmm6
	cvtsd2ss xmm6, xmm0
	movss	xmm0, DWORD PTR [rbx+16]
	subss	xmm1, xmm2
	mulss	xmm0, xmm0
	movss	DWORD PTR [rbx+36], xmm6
	divss	xmm2, xmm0
	mulss	xmm1, xmm1
	addss	xmm2, xmm1
	cvtps2pd xmm0, xmm2
	call	QWORD PTR __imp_sqrt
	movsd	xmm1, QWORD PTR __real@3ff0000000000000

; 181  : 			float r0 = 1.0 + lpf_b1 + lpf_b2;

	movss	xmm2, DWORD PTR [rbx+32]
	divsd	xmm1, xmm0
	addss	xmm2, xmm8
	subss	xmm8, DWORD PTR [rbx+32]
	addss	xmm2, DWORD PTR [rbx+36]
	addss	xmm8, xmm6
	mulss	xmm8, xmm12
	mulss	xmm8, xmm12
	cvtps2pd xmm0, xmm8
	mulsd	xmm0, xmm1
	cvtpd2ps xmm1, xmm0

; 182  : 			lpf_a0 = (r0 + r1) / 2.0;

	addss	xmm1, xmm2
	mulss	xmm1, xmm11

; 183  : 			lpf_a1 = r0 - lpf_a0;

	subss	xmm2, xmm1
	movss	DWORD PTR [rbx+20], xmm1
	movss	DWORD PTR [rbx+24], xmm2
$LN18@updateGain:

; 184  : 			lpf_a2 = 0.0;
; 185  : 			lpf_c0 = 1.0;
; 186  : 			break;
; 187  : 		}
; 188  : 		}		
; 189  : 	}

	and	DWORD PTR [rbx+28], 0
	jmp	$LN17@updateGain
$LN9@updateGain:
	movd	xmm0, DWORD PTR [rbx+8]
	movss	xmm2, DWORD PTR [rbx+4]

; 149  : 			lpf_a2 = 0.0;
; 150  : 			lpf_b2 = 0.0;
; 151  : 			lpf_c0 = 1.0;
; 152  : 			break;
; 153  : 		}
; 154  : 		case LPFilterType::AllPoleMMA: {
; 155  : 			float thetac = 2.0 * M_PI * lpf_cutoffFreq / (float)lpf_sampleRate;
; 156  : 			float resonance;
; 157  : 			if (lpf_Q <= 0.707)

	movss	xmm3, DWORD PTR [rbx+16]
	cvtps2pd xmm2, xmm2
	cvtdq2ps xmm0, xmm0
	mulsd	xmm2, QWORD PTR __real@401921fb54442d18
	cvtps2pd xmm1, xmm0
	cvtps2pd xmm0, xmm3
	divsd	xmm2, xmm1
	comisd	xmm0, QWORD PTR __real@3fe69fbe76c8b439
	cvtpd2ps xmm7, xmm2
	ja	SHORT $LN10@updateGain

; 158  : 				resonance = 0.0;

	xorps	xmm11, xmm11
	jmp	SHORT $LN11@updateGain
$LN10@updateGain:

; 159  : 			else
; 160  : 				resonance = 20.0 * log10(lpf_Q * lpf_Q / sqrt(lpf_Q * lpf_Q - 0.25));

	mulss	xmm3, xmm3
	cvtps2pd xmm6, xmm3
	subss	xmm3, DWORD PTR __real@3e800000
	cvtps2pd xmm0, xmm3
	call	QWORD PTR __imp_sqrt
	divsd	xmm6, xmm0
	movaps	xmm0, xmm6
	call	QWORD PTR __imp_log10
	mulsd	xmm0, QWORD PTR __real@4034000000000000
	xorps	xmm11, xmm11
	cvtsd2ss xmm11, xmm0
$LN11@updateGain:

; 161  : 			float r = (cos(thetac) + sin(thetac) * sqrt(pow(10.0, resonance / 10.0) - 1.0)) / (pow(10.0, resonance / 20.0) * sin(thetac) + 1.0);

	movsd	xmm9, QWORD PTR __real@4024000000000000
	movaps	xmm0, xmm11
	mulss	xmm0, DWORD PTR __real@3dcccccd
	cvtps2pd xmm10, xmm7
	cvtps2pd xmm1, xmm0
	movaps	xmm0, xmm9
	call	QWORD PTR __imp_pow
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	call	QWORD PTR __imp_sqrt
	movaps	xmm6, xmm0
	movaps	xmm0, xmm10
	call	QWORD PTR __imp_sin
	mulsd	xmm6, xmm0
	movaps	xmm0, xmm10
	call	QWORD PTR __imp_cos
	movaps	xmm1, xmm11
	movaps	xmm7, xmm0
	mulss	xmm1, DWORD PTR __real@3d4ccccd
	addsd	xmm7, xmm6
	movaps	xmm0, xmm9
	cvtps2pd xmm1, xmm1
	call	QWORD PTR __imp_pow
	movaps	xmm6, xmm0
	movaps	xmm0, xmm10
	call	QWORD PTR __imp_sin

; 162  : 			float g = pow(10.0, -resonance / 40.0);

	mulss	xmm11, DWORD PTR __real@bccccccd
	mulsd	xmm6, xmm0
	movaps	xmm0, xmm9
	cvtps2pd xmm1, xmm11
	addsd	xmm6, QWORD PTR __real@3ff0000000000000
	divsd	xmm7, xmm6
	cvtsd2ss xmm7, xmm7
	call	QWORD PTR __imp_pow
	xorps	xmm6, xmm6
	cvtsd2ss xmm6, xmm0

; 163  : 			lpf_b1 = -2.0 * r * cos(thetac);

	movaps	xmm0, xmm10
	call	QWORD PTR __imp_cos

; 164  : 			lpf_b2 = r * r;
; 165  : 			lpf_a0 = g * (1.0 + lpf_b1 + lpf_b2);
; 166  : 			lpf_a1 = 0.0;

	and	DWORD PTR [rbx+24], 0
	xorps	xmm2, xmm2
	movaps	xmm1, xmm7
	mulss	xmm7, xmm7
	mulss	xmm1, DWORD PTR __real@c0000000
	movss	DWORD PTR [rbx+36], xmm7
	cvtss2sd xmm1, xmm1
	mulsd	xmm0, xmm1
	cvtsd2ss xmm2, xmm0
	movss	DWORD PTR [rbx+32], xmm2
	addss	xmm2, DWORD PTR __real@3f800000
	addss	xmm2, xmm7
	mulss	xmm2, xmm6
	movss	DWORD PTR [rbx+20], xmm2

; 167  : 			lpf_a2 = 0.0;
; 168  : 			lpf_c0 = 1.0;
; 169  : 			break;

	jmp	$LN18@updateGain
$LN8@updateGain:
	movss	xmm2, DWORD PTR [rbx+4]
	xorps	xmm0, xmm0

; 142  : 		}
; 143  : 		case LPFilterType::AllPoleFirstOrder: {
; 144  : 			float thetac = 2.0 * M_PI * lpf_cutoffFreq / (float)lpf_sampleRate;

	cvtsi2ss xmm0, DWORD PTR [rbx+8]
	cvtps2pd xmm2, xmm2
	cvtps2pd xmm1, xmm0
	mulsd	xmm2, QWORD PTR __real@401921fb54442d18
	divsd	xmm2, xmm1
	cvtpd2ps xmm0, xmm2

; 145  : 			float gamma = 2.0 - cos(thetac);

	cvtps2pd xmm0, xmm0
	call	QWORD PTR __imp_cos
	movsd	xmm1, QWORD PTR __real@4000000000000000
	subsd	xmm1, xmm0
	cvtpd2ps xmm6, xmm1

; 146  : 			lpf_b1 = sqrt(gamma * gamma - 1.0) - gamma;

	movaps	xmm2, xmm6
	mulss	xmm2, xmm6
	subss	xmm2, DWORD PTR __real@3f800000
	cvtps2pd xmm0, xmm2
	call	QWORD PTR __imp_sqrt

; 147  : 			lpf_a0 = 1.0 + lpf_b1;
; 148  : 			lpf_a1 = 0.0;

	and	DWORD PTR [rbx+24], 0
	xorps	xmm2, xmm2
	cvtps2pd xmm1, xmm6
	subsd	xmm0, xmm1
	cvtsd2ss xmm2, xmm0
	movss	DWORD PTR [rbx+32], xmm2
	addss	xmm2, DWORD PTR __real@3f800000
	movss	DWORD PTR [rbx+20], xmm2
$LN20@updateGain:

; 184  : 			lpf_a2 = 0.0;
; 185  : 			lpf_c0 = 1.0;
; 186  : 			break;
; 187  : 		}
; 188  : 		}		
; 189  : 	}

	and	DWORD PTR [rbx+28], 0
	and	DWORD PTR [rbx+36], 0
	jmp	$LN17@updateGain
$LN7@updateGain:
	movss	xmm2, DWORD PTR [rbx+4]
	xorps	xmm0, xmm0

; 131  : 		}
; 132  : 		case LPFilterType::DigitalFirstOrder: {
; 133  : 			float thetac = 2.0 * M_PI * lpf_cutoffFreq / (float)lpf_sampleRate;

	cvtsi2ss xmm0, DWORD PTR [rbx+8]
	cvtps2pd xmm2, xmm2
	cvtps2pd xmm1, xmm0
	mulsd	xmm2, QWORD PTR __real@401921fb54442d18
	divsd	xmm2, xmm1
	cvtpd2ps xmm0, xmm2

; 134  : 			float gamma = cos(thetac) / (1.0 + sin(thetac));

	cvtps2pd xmm6, xmm0
	movaps	xmm0, xmm6
	call	QWORD PTR __imp_cos
	movaps	xmm7, xmm0
	movaps	xmm0, xmm6
	call	QWORD PTR __imp_sin

; 135  : 			lpf_a0 = (1.0 - gamma) / 2.0;

	movss	xmm1, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm7, xmm0
	cvtsd2ss xmm2, xmm7
	subss	xmm1, xmm2

; 136  : 			lpf_a1 = lpf_a0;
; 137  : 			lpf_a2 = 0.0;
; 138  : 			lpf_b1 = -gamma;

	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR [rbx+32], xmm2
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	DWORD PTR [rbx+20], xmm1
	movss	DWORD PTR [rbx+24], xmm1

; 139  : 			lpf_b2 = 0.0;
; 140  : 			lpf_c0 = 1.0;
; 141  : 			break;

	jmp	$LN20@updateGain
$LN6@updateGain:
	movss	xmm2, DWORD PTR [rbx+4]
	xorps	xmm0, xmm0

; 117  : 		}
; 118  : 		case LPFilterType::Shelving: {
; 119  : 			float thetac = 2.0 * M_PI * lpf_cutoffFreq / (float)lpf_sampleRate;

	cvtsi2ss xmm0, DWORD PTR [rbx+8]
	cvtps2pd xmm2, xmm2
	cvtps2pd xmm1, xmm0
	mulsd	xmm2, QWORD PTR __real@401921fb54442d18

; 120  : 			float mi = pow(10.0, lpf_shelvingGaindB / 20.0);

	movss	xmm0, DWORD PTR [rbx+12]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	divsd	xmm2, xmm1
	cvtps2pd xmm1, xmm0
	movsd	xmm0, QWORD PTR __real@4024000000000000
	cvtpd2ps xmm7, xmm2
	call	QWORD PTR __imp_pow

; 121  : 			float beta = 4.0 / (1.0 + mi);
; 122  : 			float delta = beta * tan(thetac / 2.0);

	mulss	xmm7, DWORD PTR __real@3f000000
	xorps	xmm1, xmm1
	movss	xmm9, DWORD PTR __real@3f800000
	movss	xmm6, DWORD PTR __real@40800000
	cvtsd2ss xmm1, xmm0
	cvtps2pd xmm0, xmm7
	addss	xmm1, xmm9
	divss	xmm6, xmm1
	call	QWORD PTR __imp_tan

; 123  : 			float gamma = (1.0 - delta) / (1.0 + delta);

	movaps	xmm3, xmm9
	xorps	xmm2, xmm2
	cvtps2pd xmm1, xmm6
	mulsd	xmm0, xmm1
	cvtsd2ss xmm2, xmm0
	subss	xmm3, xmm2
	addss	xmm2, xmm9
	divss	xmm3, xmm2

; 124  : 			lpf_a0 = (1.0 - gamma) / 2.0;

	subss	xmm9, xmm3

; 125  : 			lpf_a1 = lpf_a0;
; 126  : 			lpf_a2 = 0.0;
; 127  : 			lpf_b1 = -gamma;

	xorps	xmm3, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR [rbx+32], xmm3
	mulss	xmm9, DWORD PTR __real@3f000000
	movss	DWORD PTR [rbx+20], xmm9
	movss	DWORD PTR [rbx+24], xmm9

; 128  : 			lpf_b2 = 0.0;
; 129  : 			lpf_c0 = 1.0;// mi - 1.0;
; 130  : 			break;

	jmp	$LN20@updateGain
$LN5@updateGain:
	movss	xmm0, DWORD PTR [rbx+4]

; 102  : 			lpf_c0 = 1.0;
; 103  : 			break;
; 104  : 		}
; 105  : 		case LPFilterType::LinkwitzRiley: {
; 106  : 			float omegac = M_PI * lpf_cutoffFreq;

	cvtps2pd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@400921fb54442d18
	cvtpd2ps xmm8, xmm0
	xorps	xmm0, xmm0

; 107  : 			float thetac = omegac / (float)lpf_sampleRate;

	cvtsi2ss xmm0, DWORD PTR [rbx+8]
	movaps	xmm1, xmm8
	divss	xmm1, xmm0

; 108  : 			float k = omegac / tan(thetac);

	cvtps2pd xmm6, xmm8
	cvtps2pd xmm0, xmm1
	call	QWORD PTR __imp_tan

; 109  : 			float delta = k * k + omegac * omegac + 2 * k * omegac;
; 110  : 			lpf_a0 = omegac * omegac / delta;

	movss	xmm3, DWORD PTR __real@3f800000
	movaps	xmm7, xmm8
	divsd	xmm6, xmm0
	mulss	xmm7, xmm8

; 111  : 			lpf_a1 = 2 * lpf_a0;
; 112  : 			lpf_a2 = lpf_a0;
; 113  : 			lpf_b1 = (-2 * k * k + 2 * omegac * omegac) / delta;

	movaps	xmm2, xmm8
	cvtpd2ps xmm6, xmm6
	movaps	xmm0, xmm7
	addss	xmm2, xmm8
	movaps	xmm4, xmm6
	movaps	xmm9, xmm6
	mulss	xmm9, xmm6
	addss	xmm4, xmm6
	movaps	xmm1, xmm7
	mulss	xmm2, xmm8
	addss	xmm0, xmm9
	movaps	xmm5, xmm4
	mulss	xmm5, xmm8
	mulss	xmm4, xmm6
	addss	xmm0, xmm5

; 114  : 			lpf_b2 = (-2 * k * omegac + k * k + omegac * omegac) / delta;

	subss	xmm9, xmm5
	subss	xmm2, xmm4
	divss	xmm3, xmm0
	addss	xmm9, xmm7
	mulss	xmm1, xmm3
	mulss	xmm2, xmm3
	movaps	xmm0, xmm1
	mulss	xmm9, xmm3
	addss	xmm0, xmm1
	movss	DWORD PTR [rbx+20], xmm1
	movss	DWORD PTR [rbx+28], xmm1
	movss	DWORD PTR [rbx+32], xmm2
	movss	DWORD PTR [rbx+36], xmm9
	movss	DWORD PTR [rbx+24], xmm0

; 115  : 			lpf_c0 = 1.0;
; 116  : 			break;

	jmp	$LN17@updateGain
$LN4@updateGain:
	movss	xmm0, DWORD PTR [rbx+4]
	xorps	xmm1, xmm1

; 94   : 		case LPFilterType::Butterworth: {
; 95   : 			// define lpf fb and ff gains
; 96   : 			float C = 1.0 / tan((M_PI * lpf_cutoffFreq) / (float)lpf_sampleRate);

	cvtsi2ss xmm1, DWORD PTR [rbx+8]
	cvtps2pd xmm0, xmm0
	cvtps2pd xmm2, xmm1
	mulsd	xmm0, QWORD PTR __real@400921fb54442d18
	divsd	xmm0, xmm2
	call	QWORD PTR __imp_tan
	movsd	xmm10, QWORD PTR __real@3ff0000000000000
	movaps	xmm1, xmm10
	divsd	xmm1, xmm0

; 97   : 			lpf_a0 = 1.0 / (1.0 + sqrt(2.0) * C + C * C);

	movsd	xmm0, QWORD PTR __real@4000000000000000
	cvtpd2ps xmm7, xmm1
	cvtps2pd xmm8, xmm7
	mulss	xmm7, xmm7
	cvtps2pd xmm9, xmm7
	call	QWORD PTR __imp_sqrt
	mulsd	xmm0, xmm8
	movaps	xmm1, xmm10
	addsd	xmm0, xmm10
	addsd	xmm0, xmm9
	divsd	xmm1, xmm0

; 98   : 			lpf_a1 = 2.0 * lpf_a0;
; 99   : 			lpf_a2 = lpf_a0;
; 100  : 			lpf_b1 = 2.0 * lpf_a0 * (1 - C * C);
; 101  : 			lpf_b2 = lpf_a0 * (1.0 - sqrt(2.0) * C + C * C);

	movsd	xmm0, QWORD PTR __real@4000000000000000
	cvtpd2ps xmm2, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	movaps	xmm3, xmm2
	movss	DWORD PTR [rbx+20], xmm2
	addss	xmm3, xmm2
	movss	DWORD PTR [rbx+28], xmm2
	subss	xmm1, xmm7
	movss	DWORD PTR [rbx+24], xmm3
	mulss	xmm1, xmm3
	movss	DWORD PTR [rbx+32], xmm1
	call	QWORD PTR __imp_sqrt
	mulsd	xmm0, xmm8
	subsd	xmm10, xmm0
	movss	xmm0, DWORD PTR [rbx+20]
	cvtps2pd xmm0, xmm0
	addsd	xmm10, xmm9
	mulsd	xmm0, xmm10
	cvtpd2ps xmm0, xmm0
	movss	DWORD PTR [rbx+36], xmm0
$LN17@updateGain:

; 184  : 			lpf_a2 = 0.0;
; 185  : 			lpf_c0 = 1.0;
; 186  : 			break;
; 187  : 		}
; 188  : 		}		
; 189  : 	}

	mov	DWORD PTR [rbx+40], 1065353216		; 3f800000H
$LN2@updateGain:
	movaps	xmm7, XMMWORD PTR [rsp+112]
	lea	r11, QWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	mov	rsp, r11
	pop	rbx
	ret	0
?updateGains@LowPassFilter@@QEAAXXZ ENDP		; LowPassFilter::updateGains
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\LowPassFilter.h
;	COMDAT ?updateBuffers@LowPassFilter@@QEAAXMM@Z
_TEXT	SEGMENT
this$ = 8
xn$ = 16
yn$ = 24
?updateBuffers@LowPassFilter@@QEAAXMM@Z PROC		; LowPassFilter::updateBuffers, COMDAT

; 192  : 		lpf_xn_2 = lpf_xn_1;

	mov	eax, DWORD PTR [rcx+44]
	mov	DWORD PTR [rcx+48], eax

; 193  : 		lpf_yn_2 = lpf_yn_1;

	mov	eax, DWORD PTR [rcx+52]

; 194  : 		lpf_xn_1 = xn;
; 195  : 		lpf_yn_1 = yn;

	movss	DWORD PTR [rcx+52], xmm2
	mov	DWORD PTR [rcx+56], eax
	movss	DWORD PTR [rcx+44], xmm1

; 196  : 	}

	ret	0
?updateBuffers@LowPassFilter@@QEAAXMM@Z ENDP		; LowPassFilter::updateBuffers
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\LowPassFilter.h
;	COMDAT ?processAudio@LowPassFilter@@QEAAMM@Z
_TEXT	SEGMENT
this$ = 32
xn$ = 40
?processAudio@LowPassFilter@@QEAAMM@Z PROC		; LowPassFilter::processAudio, COMDAT

; 198  : 	float processAudio(float xn) {

$LN6:
	sub	rsp, 24

; 199  : 		// compute filtered output
; 200  : 		float yn = lpf_a0 * xn + lpf_a1 * lpf_xn_1 + lpf_a2 * lpf_xn_2 - lpf_b1 * lpf_yn_1 - lpf_b2 * lpf_yn_2;

	movss	xmm4, DWORD PTR [rcx+44]
	movaps	xmm0, xmm1
	movss	xmm3, DWORD PTR [rcx+52]
	movaps	xmm5, xmm4
	mulss	xmm5, DWORD PTR [rcx+24]
	movaps	xmm2, xmm3
	mulss	xmm0, DWORD PTR [rcx+20]
	mulss	xmm2, DWORD PTR [rcx+32]
	addss	xmm5, xmm0
	movaps	XMMWORD PTR [rsp], xmm6
	movaps	xmm6, xmm1
	movss	xmm1, DWORD PTR [rcx+28]
	mulss	xmm1, DWORD PTR [rcx+48]

; 194  : 		lpf_xn_1 = xn;

	movss	DWORD PTR [rcx+44], xmm6

; 206  : 	}

	movaps	xmm6, XMMWORD PTR [rsp]
	addss	xmm5, xmm1

; 192  : 		lpf_xn_2 = lpf_xn_1;

	movss	DWORD PTR [rcx+48], xmm4

; 199  : 		// compute filtered output
; 200  : 		float yn = lpf_a0 * xn + lpf_a1 * lpf_xn_1 + lpf_a2 * lpf_xn_2 - lpf_b1 * lpf_yn_1 - lpf_b2 * lpf_yn_2;

	movss	xmm1, DWORD PTR [rcx+36]
	mulss	xmm1, DWORD PTR [rcx+56]

; 193  : 		lpf_yn_2 = lpf_yn_1;

	movss	DWORD PTR [rcx+56], xmm3

; 199  : 		// compute filtered output
; 200  : 		float yn = lpf_a0 * xn + lpf_a1 * lpf_xn_1 + lpf_a2 * lpf_xn_2 - lpf_b1 * lpf_yn_1 - lpf_b2 * lpf_yn_2;

	subss	xmm5, xmm2
	subss	xmm5, xmm1

; 195  : 		lpf_yn_1 = yn;

	movss	DWORD PTR [rcx+52], xmm5

; 201  : 
; 202  : 		// update buffers
; 203  : 		updateBuffers(xn, yn);
; 204  : 
; 205  : 		return lpf_c0 * yn;

	mulss	xmm5, DWORD PTR [rcx+40]
	movaps	xmm0, xmm5

; 206  : 	}

	add	rsp, 24
	ret	0
?processAudio@LowPassFilter@@QEAAMM@Z ENDP		; LowPassFilter::processAudio
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\prova\Shimmer\include\src\CombFilter.cpp
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\prova\Shimmer\include\LowPassFilter.h
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
;	COMDAT ??0LPCombFilter@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
this$ = 48
??0LPCombFilter@@QEAA@XZ PROC				; LPCombFilter::LPCombFilter, COMDAT

; 6    : LPCombFilter::LPCombFilter() : CombFilter() {

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	xor	ebp, ebp
	mov	QWORD PTR [rcx+40], rbp
	mov	QWORD PTR [rcx+48], rbp
	mov	QWORD PTR [rcx+56], rbp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 10   : 	dly_makeUpGaindB		= 0.0;

	mov	DWORD PTR [rcx+64], ebp

; 11   : 	dly_makeUpGain			= 1.0;

	mov	QWORD PTR [rcx+68], 1065353216		; 3f800000H

; 12   : 	dly_delayInmsec			= 0.0;
; 13   : 	dly_delayInSamples		= 0.0;

	mov	QWORD PTR [rcx+20], rbp

; 14   : 	dly_readIndex			= 0;

	mov	QWORD PTR [rcx+28], rbp

; 15   : 	dly_writeIndex			= 0;
; 16   : 	dly_lineLengthInSamples = 0;

	mov	QWORD PTR [rcx+12], rbp

; 17   : 	dly_lineLengthInmsec	= 0.0;
; 18   : 	dly_sampleRate			= _TEMPLATE_SAMPLERATE;

	mov	DWORD PTR [rcx+8], 44100		; 0000ac44H
; File E:\prova\Shimmer\include\src\CombFilter.cpp

; 8    : 	cf_decayInSeconds   = 0.0;

	mov	DWORD PTR [rcx+76], ebp

; 9    : 	cf_feedbackGainSign = 1;

	mov	DWORD PTR [rcx+80], 1
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp

; 6    : LPCombFilter::LPCombFilter() : CombFilter() {

	lea	rax, OFFSET FLAT:??_7LPCombFilter@@6B@
	mov	QWORD PTR [rcx], rax

; 7    : 	lpcf_feedbackLPF = new LowPassFilter();	

	lea	ecx, QWORD PTR [rbp+60]
	call	??2@YAPEAX_K@Z				; operator new
	mov	rbx, rax
	mov	QWORD PTR $T1[rsp], rax
; File E:\prova\Shimmer\include\LowPassFilter.h

; 39   : 			lpf_cutoffFreq = freq;

	mov	DWORD PTR [rax+4], 1184645120		; 469c4000H

; 40   : 			lpf_sampleRate = sampleRate;

	mov	DWORD PTR [rax+8], 44100		; 0000ac44H

; 41   : 			lpf_type = type;

	mov	DWORD PTR [rax], ebp

; 42   : 			lpf_shelvingGaindB = DEFAULT_SHELVING_GAIN;

	mov	DWORD PTR [rax+12], -1061158912		; c0c00000H

; 43   : 			lpf_Q = DEFAULT_RESONANCE;

	mov	DWORD PTR [rax+16], 1060437492		; 3f34fdf4H

; 44   : 			lpf_xn_1 = 0.0;

	mov	QWORD PTR [rax+44], rbp

; 45   : 			lpf_xn_2 = 0.0;
; 46   : 			lpf_yn_1 = 0.0;

	mov	QWORD PTR [rax+52], rbp

; 47   : 			lpf_yn_2 = 0.0;
; 48   : 			updateGains();

	mov	rcx, rax
	call	?updateGains@LowPassFilter@@QEAAXXZ	; LowPassFilter::updateGains
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp

; 7    : 	lpcf_feedbackLPF = new LowPassFilter();	

	mov	QWORD PTR [rdi+88], rbx

; 8    : }

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0LPCombFilter@@QEAA@XZ ENDP				; LPCombFilter::LPCombFilter
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 48
this$ = 48
?dtor$0@?0???0LPCombFilter@@QEAA@XZ@4HA PROC		; `LPCombFilter::LPCombFilter'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1CombFilter@@QEAA@XZ			; CombFilter::~CombFilter
?dtor$0@?0???0LPCombFilter@@QEAA@XZ@4HA ENDP		; `LPCombFilter::LPCombFilter'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogspy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 48
this$ = 48
?dtor$0@?0???0LPCombFilter@@QEAA@XZ@4HA PROC		; `LPCombFilter::LPCombFilter'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1CombFilter@@QEAA@XZ			; CombFilter::~CombFilter
?dtor$0@?0???0LPCombFilter@@QEAA@XZ@4HA ENDP		; `LPCombFilter::LPCombFilter'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\prova\Shimmer\include\src\CombFilter.cpp
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\prova\Shimmer\include\src\CombFilter.cpp
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
;	COMDAT ??1LPCombFilter@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1LPCombFilter@@QEAA@XZ PROC				; LPCombFilter::~LPCombFilter, COMDAT

; 10   : LPCombFilter::~LPCombFilter() {

$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7LPCombFilter@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax

; 11   : 	delete lpcf_feedbackLPF;

	mov	rcx, QWORD PTR [rcx+88]
	test	rcx, rcx
	je	SHORT $LN6@LPCombFilt
	mov	edx, 60					; 0000003cH
	call	??3@YAXPEAX_K@Z				; operator delete
$LN6@LPCombFilt:
; File E:\prova\Shimmer\include\src\CombFilter.cpp

; 13   : CombFilter::~CombFilter() {}

	lea	rax, OFFSET FLAT:??_7CombFilter@@6B@
	mov	rcx, rbx
	mov	QWORD PTR [rbx], rax
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp

; 12   : }

	add	rsp, 32					; 00000020H
	pop	rbx
; File E:\prova\Shimmer\include\src\CombFilter.cpp

; 13   : CombFilter::~CombFilter() {}

	jmp	??1Delay@@QEAA@XZ			; Delay::~Delay
??1LPCombFilter@@QEAA@XZ ENDP				; LPCombFilter::~LPCombFilter
_TEXT	ENDS
; Function compile flags: /Ogspy
;	COMDAT ??_GLowPassFilter@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_GLowPassFilter@@QEAAPEAXI@Z PROC			; LowPassFilter::`scalar deleting destructor', COMDAT
$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	edx, 60					; 0000003cH
	mov	rbx, rcx
	call	??3@YAXPEAX_K@Z				; operator delete
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_GLowPassFilter@@QEAAPEAXI@Z ENDP			; LowPassFilter::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\prova\Shimmer\include\LowPassFilter.h
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\prova\Shimmer\include\LowPassFilter.h
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
;	COMDAT ?init@LPCombFilter@@UEAAXMH@Z
_TEXT	SEGMENT
this$ = 48
maxDelayInmsec$ = 56
sampleRate$ = 64
?init@LPCombFilter@@UEAAXMH@Z PROC			; LPCombFilter::init, COMDAT

; 14   : void LPCombFilter::init(float maxDelayInmsec, int sampleRate) {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	rdi, rcx

; 15   : 	// initialize delay line
; 16   : 	Delay::init(maxDelayInmsec, sampleRate);

	call	?init@Delay@@UEAAXMH@Z			; Delay::init

; 17   : 
; 18   : 	// initialize LPF
; 19   : 	lpcf_feedbackLPF->init(sampleRate);

	mov	rax, QWORD PTR [rdi+88]
	mov	DWORD PTR [rax+8], ebx

; 25   : 	lpcf_cutoffFreq = cutoffFreq;

	mov	eax, 1184645120				; 469c4000H

; 26   : 
; 27   : 	// set LPF cutoff frequency to the inserted value
; 28   : 	lpcf_feedbackLPF->setCutoffFrequency(lpcf_cutoffFreq);

	mov	rcx, QWORD PTR [rdi+88]
	mov	DWORD PTR [rdi+96], eax
; File E:\prova\Shimmer\include\LowPassFilter.h

; 68   : 		lpf_cutoffFreq = cutoffFreq;

	mov	DWORD PTR [rcx+4], eax
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp

; 21   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
; File E:\prova\Shimmer\include\LowPassFilter.h

; 71   : 		updateGains();

	jmp	?updateGains@LowPassFilter@@QEAAXXZ	; LowPassFilter::updateGains
?init@LPCombFilter@@UEAAXMH@Z ENDP			; LPCombFilter::init
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\prova\Shimmer\include\LowPassFilter.h
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
;	COMDAT ?setCutoffFrequency@LPCombFilter@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 8
cutoffFreq$ = 16
?setCutoffFrequency@LPCombFilter@@QEAAXM@Z PROC		; LPCombFilter::setCutoffFrequency, COMDAT

; 24   : 	// set LPCF cutoff frequency to the inserted value
; 25   : 	lpcf_cutoffFreq = cutoffFreq;

	movss	DWORD PTR [rcx+96], xmm1

; 26   : 
; 27   : 	// set LPF cutoff frequency to the inserted value
; 28   : 	lpcf_feedbackLPF->setCutoffFrequency(lpcf_cutoffFreq);

	mov	rcx, QWORD PTR [rcx+88]
; File E:\prova\Shimmer\include\LowPassFilter.h

; 68   : 		lpf_cutoffFreq = cutoffFreq;

	movss	DWORD PTR [rcx+4], xmm1

; 69   : 
; 70   : 		// update lpf gains
; 71   : 		updateGains();

	jmp	?updateGains@LowPassFilter@@QEAAXXZ	; LowPassFilter::updateGains
?setCutoffFrequency@LPCombFilter@@QEAAXM@Z ENDP		; LPCombFilter::setCutoffFrequency
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\prova\Shimmer\include\LowPassFilter.h
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
;	COMDAT ?setFilterType@LPCombFilter@@QEAAXW4LPFilterType@@@Z
_TEXT	SEGMENT
this$ = 8
type$dead$ = 16
?setFilterType@LPCombFilter@@QEAAXW4LPFilterType@@@Z PROC ; LPCombFilter::setFilterType, COMDAT

; 32   : 	lpcf_feedbackLPF->setFilterType(type);

	mov	rcx, QWORD PTR [rcx+88]
; File E:\prova\Shimmer\include\LowPassFilter.h

; 76   : 		lpf_type = type;

	mov	DWORD PTR [rcx], 6

; 77   : 
; 78   : 		// update lpf gains
; 79   : 		updateGains();

	jmp	?updateGains@LowPassFilter@@QEAAXXZ	; LowPassFilter::updateGains
?setFilterType@LPCombFilter@@QEAAXW4LPFilterType@@@Z ENDP ; LPCombFilter::setFilterType
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\prova\Shimmer\include\LowPassFilter.h
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\prova\Shimmer\include\LowPassFilter.h
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\prova\Shimmer\include\LowPassFilter.h
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
;	COMDAT ?processLowPass@LPCombFilter@@QEAAMM@Z
_TEXT	SEGMENT
this$ = 32
xn$ = 40
?processLowPass@LPCombFilter@@QEAAMM@Z PROC		; LPCombFilter::processLowPass, COMDAT

; 35   : float LPCombFilter::processLowPass(float xn) {

$LN8:
	sub	rsp, 24

; 36   : 	return lpcf_feedbackLPF->processAudio(xn);

	mov	rax, QWORD PTR [rcx+88]
; File E:\prova\Shimmer\include\LowPassFilter.h

; 200  : 		float yn = lpf_a0 * xn + lpf_a1 * lpf_xn_1 + lpf_a2 * lpf_xn_2 - lpf_b1 * lpf_yn_1 - lpf_b2 * lpf_yn_2;

	movaps	xmm0, xmm1
	movaps	XMMWORD PTR [rsp], xmm6
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp

; 35   : float LPCombFilter::processLowPass(float xn) {

	movaps	xmm6, xmm1
; File E:\prova\Shimmer\include\LowPassFilter.h

; 200  : 		float yn = lpf_a0 * xn + lpf_a1 * lpf_xn_1 + lpf_a2 * lpf_xn_2 - lpf_b1 * lpf_yn_1 - lpf_b2 * lpf_yn_2;

	movss	xmm4, DWORD PTR [rax+44]
	movss	xmm3, DWORD PTR [rax+52]
	movaps	xmm5, xmm4
	mulss	xmm5, DWORD PTR [rax+24]
	movaps	xmm2, xmm3
	mulss	xmm0, DWORD PTR [rax+20]
	movss	xmm1, DWORD PTR [rax+28]
	mulss	xmm1, DWORD PTR [rax+48]
	mulss	xmm2, DWORD PTR [rax+32]
	addss	xmm5, xmm0

; 194  : 		lpf_xn_1 = xn;

	movss	DWORD PTR [rax+44], xmm6
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp

; 37   : }

	movaps	xmm6, XMMWORD PTR [rsp]
; File E:\prova\Shimmer\include\LowPassFilter.h

; 192  : 		lpf_xn_2 = lpf_xn_1;

	movss	DWORD PTR [rax+48], xmm4

; 200  : 		float yn = lpf_a0 * xn + lpf_a1 * lpf_xn_1 + lpf_a2 * lpf_xn_2 - lpf_b1 * lpf_yn_1 - lpf_b2 * lpf_yn_2;

	addss	xmm5, xmm1
	movss	xmm1, DWORD PTR [rax+36]
	mulss	xmm1, DWORD PTR [rax+56]

; 193  : 		lpf_yn_2 = lpf_yn_1;

	movss	DWORD PTR [rax+56], xmm3

; 200  : 		float yn = lpf_a0 * xn + lpf_a1 * lpf_xn_1 + lpf_a2 * lpf_xn_2 - lpf_b1 * lpf_yn_1 - lpf_b2 * lpf_yn_2;

	subss	xmm5, xmm2
	subss	xmm5, xmm1

; 195  : 		lpf_yn_1 = yn;

	movss	DWORD PTR [rax+52], xmm5

; 205  : 		return lpf_c0 * yn;

	mulss	xmm5, DWORD PTR [rax+40]
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp

; 36   : 	return lpcf_feedbackLPF->processAudio(xn);

	movaps	xmm0, xmm5

; 37   : }

	add	rsp, 24
	ret	0
?processLowPass@LPCombFilter@@QEAAMM@Z ENDP		; LPCombFilter::processLowPass
_TEXT	ENDS
; Function compile flags: /Ogspy
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\prova\Shimmer\include\LowPassFilter.h
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\prova\Shimmer\include\LowPassFilter.h
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp
;	COMDAT ?processAudio@LPCombFilter@@UEAAMM@Z
_TEXT	SEGMENT
this$ = 80
xn$ = 88
?processAudio@LPCombFilter@@UEAAMM@Z PROC		; LPCombFilter::processAudio, COMDAT

; 39   : float LPCombFilter::processAudio(float xn) {

$LN17:
	sub	rsp, 72					; 00000048H
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	r9, rcx
	movaps	XMMWORD PTR [rsp+32], xmm7
	movaps	xmm6, xmm1

; 41   : 	float yn = readFromDelayLine();

	call	?readFromDelayLine@Delay@@QEAAMXZ	; Delay::readFromDelayLine

; 42   : 	
; 43   : 	// process output with LPF
; 44   : 	float yn_lpf = lpcf_feedbackLPF->processAudio(yn);

	mov	rax, QWORD PTR [r9+88]
; File E:\prova\Shimmer\include\LowPassFilter.h

; 200  : 		float yn = lpf_a0 * xn + lpf_a1 * lpf_xn_1 + lpf_a2 * lpf_xn_2 - lpf_b1 * lpf_yn_1 - lpf_b2 * lpf_yn_2;

	movaps	xmm1, xmm0
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp

; 41   : 	float yn = readFromDelayLine();

	movaps	xmm7, xmm0
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 155  : 	if (dly_readIndex >= dly_lineLengthInSamples)

	xor	edx, edx
; File E:\prova\Shimmer\include\LowPassFilter.h

; 200  : 		float yn = lpf_a0 * xn + lpf_a1 * lpf_xn_1 + lpf_a2 * lpf_xn_2 - lpf_b1 * lpf_yn_1 - lpf_b2 * lpf_yn_2;

	movss	xmm4, DWORD PTR [rax+44]
	mulss	xmm1, DWORD PTR [rax+20]
	movaps	xmm5, xmm4
	mulss	xmm5, DWORD PTR [rax+24]
	movss	xmm3, DWORD PTR [rax+52]
	movss	xmm2, DWORD PTR [rax+28]
	movaps	xmm0, xmm3
	mulss	xmm2, DWORD PTR [rax+48]
	addss	xmm5, xmm1
	mulss	xmm0, DWORD PTR [rax+32]
	movss	xmm1, DWORD PTR [rax+36]
	mulss	xmm1, DWORD PTR [rax+56]
	addss	xmm5, xmm2

; 192  : 		lpf_xn_2 = lpf_xn_1;

	movss	DWORD PTR [rax+48], xmm4

; 193  : 		lpf_yn_2 = lpf_yn_1;

	movss	DWORD PTR [rax+56], xmm3

; 194  : 		lpf_xn_1 = xn;

	movss	DWORD PTR [rax+44], xmm7

; 200  : 		float yn = lpf_a0 * xn + lpf_a1 * lpf_xn_1 + lpf_a2 * lpf_xn_2 - lpf_b1 * lpf_yn_1 - lpf_b2 * lpf_yn_2;

	subss	xmm5, xmm0
	subss	xmm5, xmm1

; 195  : 		lpf_yn_1 = yn;

	movss	DWORD PTR [rax+52], xmm5

; 205  : 		return lpf_c0 * yn;

	mulss	xmm5, DWORD PTR [rax+40]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 168  : 	dly_buffer[dly_writeIndex] = xn;

	movsxd	rcx, DWORD PTR [r9+32]
	mov	rax, QWORD PTR [r9+40]
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp

; 47   : 	float buff = xn + cf_feedbackGain * yn_lpf;

	mulss	xmm5, DWORD PTR [r9+72]
	addss	xmm5, xmm6
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 168  : 	dly_buffer[dly_writeIndex] = xn;

	movss	DWORD PTR [rax+rcx*4], xmm5

; 152  : 	dly_readIndex++;

	inc	DWORD PTR [r9+28]

; 155  : 	if (dly_readIndex >= dly_lineLengthInSamples)

	mov	ecx, DWORD PTR [r9+12]
	cmp	DWORD PTR [r9+28], ecx
	jl	SHORT $LN12@processAud

; 156  : 		dly_readIndex = 0;

	mov	DWORD PTR [r9+28], edx
$LN12@processAud:

; 157  : 
; 158  : 	// Increase writing index
; 159  : 	dly_writeIndex++;

	inc	DWORD PTR [r9+32]

; 162  : 	if (dly_writeIndex >= dly_lineLengthInSamples)

	mov	eax, DWORD PTR [r9+32]
	cmp	eax, ecx
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp

; 56   : 	return yn * dly_makeUpGain;

	mulss	xmm7, DWORD PTR [r9+68]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 162  : 	if (dly_writeIndex >= dly_lineLengthInSamples)

	cmovge	eax, edx
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp

; 57   : }

	movaps	xmm6, XMMWORD PTR [rsp+48]
; File E:\FoxSuite\fox-suite-blocks\src\Delay.cpp

; 162  : 	if (dly_writeIndex >= dly_lineLengthInSamples)

	mov	DWORD PTR [r9+32], eax
; File E:\prova\Shimmer\include\src\LPCombFilter.cpp

; 56   : 	return yn * dly_makeUpGain;

	movaps	xmm0, xmm7

; 57   : }

	movaps	xmm7, XMMWORD PTR [rsp+32]
	add	rsp, 72					; 00000048H
	ret	0
?processAudio@LPCombFilter@@UEAAMM@Z ENDP		; LPCombFilter::processAudio
_TEXT	ENDS
END
